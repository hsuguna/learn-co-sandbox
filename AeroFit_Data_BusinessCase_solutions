{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPDuK/X9wxO/1NYnVbgAji3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hsuguna/learn-co-sandbox/blob/master/AeroFit_Data_BusinessCase_solutions\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "DcWiSiWteJQb",
        "outputId": "b173d51c-7cf6-42a4-b404-ba31f42042b7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0     KP281   18    Male         14        Single      3        4   29562   \n",
              "1     KP281   19    Male         15        Single      2        3   31836   \n",
              "2     KP281   19  Female         14     Partnered      4        3   30699   \n",
              "3     KP281   19    Male         12        Single      3        3   32973   \n",
              "4     KP281   20    Male         13     Partnered      4        2   35247   \n",
              "..      ...  ...     ...        ...           ...    ...      ...     ...   \n",
              "175   KP781   40    Male         21        Single      6        5   83416   \n",
              "176   KP781   42    Male         18        Single      5        4   89641   \n",
              "177   KP781   45    Male         16        Single      5        5   90886   \n",
              "178   KP781   47    Male         18     Partnered      4        5  104581   \n",
              "179   KP781   48    Male         18     Partnered      4        5   95508   \n",
              "\n",
              "     Miles  \n",
              "0      112  \n",
              "1       75  \n",
              "2       66  \n",
              "3       85  \n",
              "4       47  \n",
              "..     ...  \n",
              "175    200  \n",
              "176    200  \n",
              "177    160  \n",
              "178    120  \n",
              "179    180  \n",
              "\n",
              "[180 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c17c7544-aedc-42a8-9783-468d786be05c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>29562</td>\n",
              "      <td>112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>31836</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>19</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>30699</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>12</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>32973</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>13</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>KP781</td>\n",
              "      <td>40</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>Single</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>83416</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>KP781</td>\n",
              "      <td>42</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>89641</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>KP781</td>\n",
              "      <td>45</td>\n",
              "      <td>Male</td>\n",
              "      <td>16</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>90886</td>\n",
              "      <td>160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>KP781</td>\n",
              "      <td>47</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>104581</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>KP781</td>\n",
              "      <td>48</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>95508</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c17c7544-aedc-42a8-9783-468d786be05c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c17c7544-aedc-42a8-9783-468d786be05c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c17c7544-aedc-42a8-9783-468d786be05c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ef25a046-eeba-48d8-95e1-c0643a7de7ea\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef25a046-eeba-48d8-95e1-c0643a7de7ea')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ef25a046-eeba-48d8-95e1-c0643a7de7ea button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4cfca5dc-e4e6-445f-9fbc-ad1aafecd785\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4cfca5dc-e4e6-445f-9fbc-ad1aafecd785 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 18,\n        \"max\": 50,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          45,\n          33,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 12,\n        \"max\": 21,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16506,\n        \"min\": 29562,\n        \"max\": 104581,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          88396,\n          103336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 21,\n        \"max\": 360,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          95,\n          169\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "df=pd.read_csv('./aerofit_treadmill.csv')\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "RCCiwrA4ehdC",
        "outputId": "e5a9ed87-b0a8-475d-a8ab-3b5712f230e9"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(180, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "dWG7AsZpekMV",
        "outputId": "686902fe-248a-4ef7-8be6-8770b8080a75"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product          object\n",
              "Age               int64\n",
              "Gender           object\n",
              "Education         int64\n",
              "MaritalStatus    object\n",
              "Usage             int64\n",
              "Fitness           int64\n",
              "Income            int64\n",
              "Miles             int64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaritalStatus</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "CSIWOq2EenDr",
        "outputId": "0b14cf65-a0d8-471d-a71e-8a99e4bf9edf"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Age   Education       Usage     Fitness         Income  \\\n",
              "count  180.000000  180.000000  180.000000  180.000000     180.000000   \n",
              "mean    28.788889   15.572222    3.455556    3.311111   53719.577778   \n",
              "std      6.943498    1.617055    1.084797    0.958869   16506.684226   \n",
              "min     18.000000   12.000000    2.000000    1.000000   29562.000000   \n",
              "25%     24.000000   14.000000    3.000000    3.000000   44058.750000   \n",
              "50%     26.000000   16.000000    3.000000    3.000000   50596.500000   \n",
              "75%     33.000000   16.000000    4.000000    4.000000   58668.000000   \n",
              "max     50.000000   21.000000    7.000000    5.000000  104581.000000   \n",
              "\n",
              "            Miles  \n",
              "count  180.000000  \n",
              "mean   103.194444  \n",
              "std     51.863605  \n",
              "min     21.000000  \n",
              "25%     66.000000  \n",
              "50%     94.000000  \n",
              "75%    114.750000  \n",
              "max    360.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f6ddde04-f1ba-4551-bf8a-26db46cd241e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Education</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>28.788889</td>\n",
              "      <td>15.572222</td>\n",
              "      <td>3.455556</td>\n",
              "      <td>3.311111</td>\n",
              "      <td>53719.577778</td>\n",
              "      <td>103.194444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6.943498</td>\n",
              "      <td>1.617055</td>\n",
              "      <td>1.084797</td>\n",
              "      <td>0.958869</td>\n",
              "      <td>16506.684226</td>\n",
              "      <td>51.863605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>29562.000000</td>\n",
              "      <td>21.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>24.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>44058.750000</td>\n",
              "      <td>66.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>26.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>50596.500000</td>\n",
              "      <td>94.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>33.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>58668.000000</td>\n",
              "      <td>114.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>50.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>104581.000000</td>\n",
              "      <td>360.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6ddde04-f1ba-4551-bf8a-26db46cd241e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f6ddde04-f1ba-4551-bf8a-26db46cd241e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f6ddde04-f1ba-4551-bf8a-26db46cd241e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e9a00a30-438b-4a89-8967-589010f2c1e1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9a00a30-438b-4a89-8967-589010f2c1e1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e9a00a30-438b-4a89-8967-589010f2c1e1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.58832332198464,\n        \"min\": 6.943498135399795,\n        \"max\": 180.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.788888888888888,\n          26.0,\n          180.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.04362112875324,\n        \"min\": 1.6170548978065553,\n        \"max\": 180.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          180.0,\n          15.572222222222223,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.474604277313155,\n        \"min\": 1.0847970343962445,\n        \"max\": 180.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          180.0,\n          3.4555555555555557,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.63086276036247,\n        \"min\": 0.958868565619312,\n        \"max\": 180.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          180.0,\n          3.311111111111111,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31403.855763201762,\n        \"min\": 180.0,\n        \"max\": 104581.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          53719.57777777778,\n          50596.5,\n          180.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.52090041797726,\n        \"min\": 21.0,\n        \"max\": 360.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          103.19444444444444,\n          94.0,\n          180.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "sKbmk5E4esNL",
        "outputId": "36e48c0d-f8d0-4649-fc23-affe9f008eea"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 180 entries, 0 to 179\n",
            "Data columns (total 9 columns):\n",
            " #   Column         Non-Null Count  Dtype \n",
            "---  ------         --------------  ----- \n",
            " 0   Product        180 non-null    object\n",
            " 1   Age            180 non-null    int64 \n",
            " 2   Gender         180 non-null    object\n",
            " 3   Education      180 non-null    int64 \n",
            " 4   MaritalStatus  180 non-null    object\n",
            " 5   Usage          180 non-null    int64 \n",
            " 6   Fitness        180 non-null    int64 \n",
            " 7   Income         180 non-null    int64 \n",
            " 8   Miles          180 non-null    int64 \n",
            "dtypes: int64(6), object(3)\n",
            "memory usage: 12.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "QOQL7wAJexll",
        "outputId": "369949be-555d-4bf7-a425-0f9ae7fca971"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product          0\n",
              "Age              0\n",
              "Gender           0\n",
              "Education        0\n",
              "MaritalStatus    0\n",
              "Usage            0\n",
              "Fitness          0\n",
              "Income           0\n",
              "Miles            0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaritalStatus</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "_2U_-qUpfCQz",
        "outputId": "bfcec141-f62e-42b7-8fd5-84902c49d39a"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product  Age  Gender  Education  MaritalStatus  Usage  Fitness  Income  Miles\n",
              "KP281    18   Male    14         Single         3      4        29562   112      1\n",
              "KP481    30   Female  13         Single         4      3        46617   106      1\n",
              "         31   Female  16         Partnered      2      3        51165   64       1\n",
              "                      18         Single         2      1        65220   21       1\n",
              "              Male    16         Partnered      3      3        52302   95       1\n",
              "                                                                                ..\n",
              "KP281    34   Female  16         Single         2      2        52302   66       1\n",
              "              Male    16         Single         4      5        51165   169      1\n",
              "         35   Female  16         Partnered      3      3        60261   94       1\n",
              "                      18         Single         3      3        67083   85       1\n",
              "KP781    48   Male    18         Partnered      4      5        95508   180      1\n",
              "Name: count, Length: 180, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>KP281</th>\n",
              "      <th>18</th>\n",
              "      <th>Male</th>\n",
              "      <th>14</th>\n",
              "      <th>Single</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>29562</th>\n",
              "      <th>112</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">KP481</th>\n",
              "      <th>30</th>\n",
              "      <th>Female</th>\n",
              "      <th>13</th>\n",
              "      <th>Single</th>\n",
              "      <th>4</th>\n",
              "      <th>3</th>\n",
              "      <th>46617</th>\n",
              "      <th>106</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">31</th>\n",
              "      <th rowspan=\"2\" valign=\"top\">Female</th>\n",
              "      <th>16</th>\n",
              "      <th>Partnered</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>51165</th>\n",
              "      <th>64</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <th>Single</th>\n",
              "      <th>2</th>\n",
              "      <th>1</th>\n",
              "      <th>65220</th>\n",
              "      <th>21</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <th>16</th>\n",
              "      <th>Partnered</th>\n",
              "      <th>3</th>\n",
              "      <th>3</th>\n",
              "      <th>52302</th>\n",
              "      <th>95</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">KP281</th>\n",
              "      <th rowspan=\"2\" valign=\"top\">34</th>\n",
              "      <th>Female</th>\n",
              "      <th>16</th>\n",
              "      <th>Single</th>\n",
              "      <th>2</th>\n",
              "      <th>2</th>\n",
              "      <th>52302</th>\n",
              "      <th>66</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <th>16</th>\n",
              "      <th>Single</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>51165</th>\n",
              "      <th>169</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">35</th>\n",
              "      <th rowspan=\"2\" valign=\"top\">Female</th>\n",
              "      <th>16</th>\n",
              "      <th>Partnered</th>\n",
              "      <th>3</th>\n",
              "      <th>3</th>\n",
              "      <th>60261</th>\n",
              "      <th>94</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <th>Single</th>\n",
              "      <th>3</th>\n",
              "      <th>3</th>\n",
              "      <th>67083</th>\n",
              "      <th>85</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <th>48</th>\n",
              "      <th>Male</th>\n",
              "      <th>18</th>\n",
              "      <th>Partnered</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>95508</th>\n",
              "      <th>180</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.nunique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "mGRIAl2FfJB5",
        "outputId": "c8ae58a9-af4f-4232-d133-b6858a9b2706"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product           3\n",
              "Age              32\n",
              "Gender            2\n",
              "Education         8\n",
              "MaritalStatus     2\n",
              "Usage             6\n",
              "Fitness           5\n",
              "Income           62\n",
              "Miles            37\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaritalStatus</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for column in df.columns:\n",
        "    print(column,df[column].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "yESfRrTSfTnM",
        "outputId": "08151ff3-6f11-4d15-d4d5-949c5f92ad64"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Product ['KP281' 'KP481' 'KP781']\n",
            "Age [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\n",
            " 43 44 46 47 50 45 48 42]\n",
            "Gender ['Male' 'Female']\n",
            "Education [14 15 12 13 16 18 20 21]\n",
            "MaritalStatus ['Single' 'Partnered']\n",
            "Usage [3 2 4 5 6 7]\n",
            "Fitness [4 3 2 1 5]\n",
            "Income [ 29562  31836  30699  32973  35247  37521  36384  38658  40932  34110\n",
            "  39795  42069  44343  45480  46617  48891  53439  43206  52302  51165\n",
            "  50028  54576  68220  55713  60261  67083  56850  59124  61398  57987\n",
            "  64809  47754  65220  62535  48658  54781  48556  58516  53536  61006\n",
            "  57271  52291  49801  62251  64741  70966  75946  74701  69721  83416\n",
            "  88396  90886  92131  77191  52290  85906 103336  99601  89641  95866\n",
            " 104581  95508]\n",
            "Miles [112  75  66  85  47 141 103  94 113  38 188  56 132 169  64  53 106  95\n",
            " 212  42 127  74 170  21 120 200 140 100  80 160 180 240 150 300 280 260\n",
            " 360]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.apply(lambda x: x.unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "eoOzYfKkf_rf",
        "outputId": "17682ff4-1aee-45f6-d362-c142fcc8f249"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product                                      [KP281, KP481, KP781]\n",
              "Age              [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2...\n",
              "Gender                                              [Male, Female]\n",
              "Education                         [14, 15, 12, 13, 16, 18, 20, 21]\n",
              "MaritalStatus                                  [Single, Partnered]\n",
              "Usage                                           [3, 2, 4, 5, 6, 7]\n",
              "Fitness                                            [4, 3, 2, 1, 5]\n",
              "Income           [29562, 31836, 30699, 32973, 35247, 37521, 363...\n",
              "Miles            [112, 75, 66, 85, 47, 141, 103, 94, 113, 38, 1...\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <td>[KP281, KP481, KP781]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>[Male, Female]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>[14, 15, 12, 13, 16, 18, 20, 21]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaritalStatus</th>\n",
              "      <td>[Single, Partnered]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <td>[3, 2, 4, 5, 6, 7]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <td>[4, 3, 2, 1, 5]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>[29562, 31836, 30699, 32973, 35247, 37521, 363...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <td>[112, 75, 66, 85, 47, 141, 103, 94, 113, 38, 1...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.apply(lambda x: x.nunique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "QBlf4j82gN9x",
        "outputId": "2d99e46c-d740-4cb7-ae93-87c70e14eac2"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product           3\n",
              "Age              32\n",
              "Gender            2\n",
              "Education         8\n",
              "MaritalStatus     2\n",
              "Usage             6\n",
              "Fitness           5\n",
              "Income           62\n",
              "Miles            37\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaritalStatus</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "-u4tpHMMgIpt",
        "outputId": "b47bfb50-dcc4-4003-e47a-1c6ad65e3327"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Hightest Using Product\n",
        "df['Product'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "4tEuCuYWgcYN",
        "outputId": "555ea535-ff8e-4085-c5bf-99509466542f"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product\n",
              "KP281    80\n",
              "KP481    60\n",
              "KP781    40\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>KP281</th>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def age_group(age):\n",
        "  if age <= 18:\n",
        "    return 'Teenager'\n",
        "  elif age > 18 and age <= 25:\n",
        "    return 'Young Adult'\n",
        "  elif age > 25 and age <= 40:\n",
        "    return 'Adult'\n",
        "  else:\n",
        "    return 'Old'\n",
        "\n",
        "df['Age_Group'] = df['Age'].apply(age_group)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hk-4L8GvgseK",
        "outputId": "7a910c23-0f0f-49d8-f399-f0216085edfb"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0   KP281   18    Male         14        Single      3        4   29562   \n",
              "1   KP281   19    Male         15        Single      2        3   31836   \n",
              "2   KP281   19  Female         14     Partnered      4        3   30699   \n",
              "3   KP281   19    Male         12        Single      3        3   32973   \n",
              "4   KP281   20    Male         13     Partnered      4        2   35247   \n",
              "\n",
              "   Miles    Age_Group  \n",
              "0    112     Teenager  \n",
              "1     75  Young Adult  \n",
              "2     66  Young Adult  \n",
              "3     85  Young Adult  \n",
              "4     47  Young Adult  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b38f1660-5b22-4e89-818a-5f7d2d72aef2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>29562</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>31836</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>19</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>30699</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>12</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>32973</td>\n",
              "      <td>85</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>13</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b38f1660-5b22-4e89-818a-5f7d2d72aef2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b38f1660-5b22-4e89-818a-5f7d2d72aef2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b38f1660-5b22-4e89-818a-5f7d2d72aef2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-263b966f-0e2b-40f9-bce2-cf79dc8daf4b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-263b966f-0e2b-40f9-bce2-cf79dc8daf4b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-263b966f-0e2b-40f9-bce2-cf79dc8daf4b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 18,\n        \"max\": 50,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          45,\n          33,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 12,\n        \"max\": 21,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16506,\n        \"min\": 29562,\n        \"max\": 104581,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          88396,\n          103336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 21,\n        \"max\": 360,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          95,\n          169\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Young Adult\",\n          \"Old\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#age group who signed up more\n",
        "df['Age_Group'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "hj1L9tJIjXTo",
        "outputId": "3b546fb5-e8e6-4110-af13-6cd2aaef1106"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age_Group\n",
              "Adult          89\n",
              "Young Adult    78\n",
              "Old            12\n",
              "Teenager        1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_Group</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Adult</th>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Young Adult</th>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Old</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Teenager</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Gender wise calculation\n",
        "df['Gender'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "p-CFn5CFjqYz",
        "outputId": "46366c60-051e-44ff-c63c-e5f6e5e0384b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Gender\n",
              "Male      104\n",
              "Female     76\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>104</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Female</th>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['MaritalStatus'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "jODSuIS2j470",
        "outputId": "0c563ba2-a5ba-4a59-f65e-568832dffd04"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Single', 'Partnered'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Marital status wise count\n",
        "df['MaritalStatus'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "A_Qm2Swzj-pb",
        "outputId": "a4d44da8-b58e-4d80-f3f5-f6099d669942"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MaritalStatus\n",
              "Partnered    107\n",
              "Single        73\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Partnered</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Single</th>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# People who are earning more\n",
        "df.sort_values(by='Income',ascending=False).reset_index(drop=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "KXzj6wWqkRRf",
        "outputId": "5503a62a-a221-4ed5-e2cc-0a51632c40b7"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0     KP781   38    Male         18     Partnered      5        5  104581   \n",
              "1     KP781   47    Male         18     Partnered      4        5  104581   \n",
              "2     KP781   30    Male         18     Partnered      5        4  103336   \n",
              "3     KP781   30    Male         18     Partnered      5        5   99601   \n",
              "4     KP781   33  Female         18     Partnered      4        5   95866   \n",
              "..      ...  ...     ...        ...           ...    ...      ...     ...   \n",
              "175   KP481   20    Male         14        Single      2        3   32973   \n",
              "176   KP281   19    Male         15        Single      2        3   31836   \n",
              "177   KP481   19    Male         14        Single      3        3   31836   \n",
              "178   KP281   19  Female         14     Partnered      4        3   30699   \n",
              "179   KP281   18    Male         14        Single      3        4   29562   \n",
              "\n",
              "     Miles    Age_Group  \n",
              "0      150        Adult  \n",
              "1      120          Old  \n",
              "2      160        Adult  \n",
              "3      150        Adult  \n",
              "4      200        Adult  \n",
              "..     ...          ...  \n",
              "175     53  Young Adult  \n",
              "176     75  Young Adult  \n",
              "177     64  Young Adult  \n",
              "178     66  Young Adult  \n",
              "179    112     Teenager  \n",
              "\n",
              "[180 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ac7563d2-163d-4452-8724-742a34aefafb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP781</td>\n",
              "      <td>38</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>104581</td>\n",
              "      <td>150</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP781</td>\n",
              "      <td>47</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>104581</td>\n",
              "      <td>120</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP781</td>\n",
              "      <td>30</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>103336</td>\n",
              "      <td>160</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP781</td>\n",
              "      <td>30</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>99601</td>\n",
              "      <td>150</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP781</td>\n",
              "      <td>33</td>\n",
              "      <td>Female</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>95866</td>\n",
              "      <td>200</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>KP481</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>32973</td>\n",
              "      <td>53</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>KP281</td>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>31836</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>KP481</td>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>31836</td>\n",
              "      <td>64</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>KP281</td>\n",
              "      <td>19</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>30699</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>KP281</td>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>29562</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac7563d2-163d-4452-8724-742a34aefafb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ac7563d2-163d-4452-8724-742a34aefafb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ac7563d2-163d-4452-8724-742a34aefafb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-54d8ac87-a21c-4d54-bff6-65ee8a34e05c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-54d8ac87-a21c-4d54-bff6-65ee8a34e05c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-54d8ac87-a21c-4d54-bff6-65ee8a34e05c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP781\",\n          \"KP281\",\n          \"KP481\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 18,\n        \"max\": 50,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          21,\n          26,\n          41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 12,\n        \"max\": 21,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Single\",\n          \"Partnered\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16506,\n        \"min\": 29562,\n        \"max\": 104581,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          42069,\n          35247\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 21,\n        \"max\": 360,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          47,\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Old\",\n          \"Teenager\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Fitness'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "1gcI2Bomktv6",
        "outputId": "ec2d2cbf-ef75-416a-f095-b7cb8388b9b5"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([4, 3, 2, 1, 5])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fitness rating wise count\n",
        "df['Fitness'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "ngF48qJ4k3at",
        "outputId": "886d1e52-5369-4b5c-f786-1a9ba0f40669"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fitness\n",
              "3    97\n",
              "5    31\n",
              "2    26\n",
              "4    24\n",
              "1     2\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "U_ts5Y4glaud",
        "outputId": "57df0f84-408b-41cc-d122-de84f422459e"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 180 entries, 0 to 179\n",
            "Data columns (total 10 columns):\n",
            " #   Column         Non-Null Count  Dtype \n",
            "---  ------         --------------  ----- \n",
            " 0   Product        180 non-null    object\n",
            " 1   Age            180 non-null    int64 \n",
            " 2   Gender         180 non-null    object\n",
            " 3   Education      180 non-null    int64 \n",
            " 4   MaritalStatus  180 non-null    object\n",
            " 5   Usage          180 non-null    int64 \n",
            " 6   Fitness        180 non-null    int64 \n",
            " 7   Income         180 non-null    int64 \n",
            " 8   Miles          180 non-null    int64 \n",
            " 9   Age_Group      180 non-null    object\n",
            "dtypes: int64(6), object(4)\n",
            "memory usage: 14.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "HLl2zp2Nl45x",
        "outputId": "39f85f11-02a3-45ac-ebcd-d53715ad1a26"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Age   Education       Usage     Fitness         Income  \\\n",
              "count  180.000000  180.000000  180.000000  180.000000     180.000000   \n",
              "mean    28.788889   15.572222    3.455556    3.311111   53719.577778   \n",
              "std      6.943498    1.617055    1.084797    0.958869   16506.684226   \n",
              "min     18.000000   12.000000    2.000000    1.000000   29562.000000   \n",
              "25%     24.000000   14.000000    3.000000    3.000000   44058.750000   \n",
              "50%     26.000000   16.000000    3.000000    3.000000   50596.500000   \n",
              "75%     33.000000   16.000000    4.000000    4.000000   58668.000000   \n",
              "max     50.000000   21.000000    7.000000    5.000000  104581.000000   \n",
              "\n",
              "            Miles  \n",
              "count  180.000000  \n",
              "mean   103.194444  \n",
              "std     51.863605  \n",
              "min     21.000000  \n",
              "25%     66.000000  \n",
              "50%     94.000000  \n",
              "75%    114.750000  \n",
              "max    360.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b92ac93-bb4b-404c-8b03-f6f53cda46c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Education</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>180.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>28.788889</td>\n",
              "      <td>15.572222</td>\n",
              "      <td>3.455556</td>\n",
              "      <td>3.311111</td>\n",
              "      <td>53719.577778</td>\n",
              "      <td>103.194444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6.943498</td>\n",
              "      <td>1.617055</td>\n",
              "      <td>1.084797</td>\n",
              "      <td>0.958869</td>\n",
              "      <td>16506.684226</td>\n",
              "      <td>51.863605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>29562.000000</td>\n",
              "      <td>21.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>24.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>44058.750000</td>\n",
              "      <td>66.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>26.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>50596.500000</td>\n",
              "      <td>94.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>33.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>58668.000000</td>\n",
              "      <td>114.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>50.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>104581.000000</td>\n",
              "      <td>360.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b92ac93-bb4b-404c-8b03-f6f53cda46c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1b92ac93-bb4b-404c-8b03-f6f53cda46c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1b92ac93-bb4b-404c-8b03-f6f53cda46c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9c347190-cebe-442b-ba62-09d00d79cd4d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c347190-cebe-442b-ba62-09d00d79cd4d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9c347190-cebe-442b-ba62-09d00d79cd4d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.58832332198464,\n        \"min\": 6.943498135399795,\n        \"max\": 180.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.788888888888888,\n          26.0,\n          180.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.04362112875324,\n        \"min\": 1.6170548978065553,\n        \"max\": 180.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          180.0,\n          15.572222222222223,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.474604277313155,\n        \"min\": 1.0847970343962445,\n        \"max\": 180.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          180.0,\n          3.4555555555555557,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.63086276036247,\n        \"min\": 0.958868565619312,\n        \"max\": 180.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          180.0,\n          3.311111111111111,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31403.855763201762,\n        \"min\": 180.0,\n        \"max\": 104581.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          53719.57777777778,\n          50596.5,\n          180.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.52090041797726,\n        \"min\": 21.0,\n        \"max\": 360.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          103.19444444444444,\n          94.0,\n          180.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.percentile(df['Age'],[5,95])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "oAYz0Oj5nXNB",
        "outputId": "9009cd9e-3686-4935-9012-e9614be7add9"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([20.  , 43.05])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Age'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "etm1QEGLldGe",
        "outputId": "5eedd784-1de6-417d-aebf-9ab62f50babd"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Age'>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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9vnLycaNGz1AlDnfT5xsjvfn2uDBgyMi4umnn44pU6ak7atWrWqx3/96XHv169cvIiLWr18fl1xySdq+fv36Fvt1huMOhJqamqipqenIsbQwdOjQuPDCCzvtfHAy8/1EuZo2bVosWrQofvzjH8ekSZNavFxw6NChePDBB6OysjKmTZt2Qo5rr5EjR8aAAQPikUceicWLF7d4meHw4cPx6KOPxsCBA2PkyJEn5HzHw0WKAJy0qqurY/r06fHuu+/G2LFjo76+Pt5+++2or6+PsWPHxrvvvhvTp09P72vQ3uPaq7KyMubOnRurVq2K2267LV566aXYu3dvvPTSS3HbbbfFqlWr4u677+7U90PwPggAnNSOvF9BXV1dzJ8/v/n+ysrKuPHGG9t8P4P2HtdeEyZMiIceeigWLlwY1113XfP9AwcOjIceeqjT3wdBIABw0rvrrrti9uzZ//U7Irb3uPaaMGFCjB8/3jspAkBnOfKyQWcd116VlZWd9l8ZP4prEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJF0uEIYMGRLLly+PIUOGlHooAHRRHis6XlWpB3C00047LS688MJSDwOALsxjRcfrcs8gAAClJxAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIqko9ADpP5d7KTj1PZ52Ptvk7ANpLIJSBPn36RHVNdfR6uVennrezz0frqmuqo0+fPqUeBvAxIxDKQG1tbfz1L3+NHTt2lHoolECfPn2itra21MMAPmYEQpmora31IAHAcXORIgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQVLX3wKIoIiJi9+7dJ2wwAEDHOvK4feRxvC3tDoQ9e/ZERMSgQYPa+ykAgBLZs2dP9OrVq83tFcWxEqINhw8fjq1bt0aPHj2ioqKi3QPsCnbv3h2DBg2KLVu2RM+ePUs9nC7DvLTOvLTN3LTOvLTN3LSuI+elKIrYs2dP1NbWRrdubV9p0O5nELp16xYDBw5s7+FdUs+ePS3QVpiX1pmXtpmb1pmXtpmb1nXUvHzUMwdHuEgRAEgEAgCQCISIqKmpiXvuuSdqampKPZQuxby0zry0zdy0zry0zdy0rivMS7svUgQATl6eQQAAEoEAACQCAQBIBAIAkJRNICxYsCAuv/zy6NGjR3zyk5+MiRMnxrp161rs8/7778eMGTOib9++0b1795g8eXK8/fbbJRpx5zieeRk3blxUVFS0uN1yyy0lGnHnefjhh2PEiBHNb1QyevTo+POf/9y8vRzXS8Sx56Vc18vRFi5cGBUVFTF79uzm+8p1zRyttbkp13Xz3e9+N33d559/fvP2Uq6ZsgmEhoaGmDFjRvz973+PlStXxgcffBATJkyIffv2Ne9zxx13xO9///t4/PHHo6GhIbZu3RqTJk0q4ag73vHMS0TEN77xjdi2bVvzbdGiRSUacecZOHBgLFy4MF544YVobGyMz3/+8/GlL30pXnvttYgoz/UScex5iSjP9fJhzz//fDz66KMxYsSIFveX65r5sLbmJqJ8182FF17Y4utevXp187aSrpmiTG3fvr2IiKKhoaEoiqLYuXNnccoppxSPP/548z7//Oc/i4gonnvuuVINs9MdPS9FURRXXnllMWvWrNINqgvp06dP8dOf/tR6OcqReSkK62XPnj3FsGHDipUrV7aYC2um7bkpivJdN/fcc09x8cUXt7qt1GumbJ5BONquXbsiIuKMM86IiIgXXnghPvjgg7j66qub9zn//PNj8ODB8dxzz5VkjKVw9Lwc8atf/SrOPPPMuOiii2LevHnx3nvvlWJ4JdPU1BSPPfZY7Nu3L0aPHm29/L+j5+WIcl4vM2bMiGuvvbbF2ojwMyai7bk5olzXzfr166O2tjaGDBkS119/fWzevDkiSr9m2v3Lmj7ODh8+HLNnz44rrrgiLrroooiIeOutt6K6ujp69+7dYt+zzjor3nrrrRKMsvO1Ni8REdOmTYtzzjknamtrY+3atXH33XfHunXrYvny5SUcbed45ZVXYvTo0fH+++9H9+7d48knn4wLLrgg1qxZU9brpa15iSjv9fLYY4/Fiy++GM8//3zaVu4/Yz5qbiLKd92MGjUq6urqYvjw4bFt27a49957Y8yYMfHqq6+WfM2UZSDMmDEjXn311Rav89D2vHzzm99s/vOnP/3p6N+/f4wfPz42btwYQ4cO7exhdqrhw4fHmjVrYteuXfHEE0/E17/+9WhoaCj1sEqurXm54IILyna9bNmyJWbNmhUrV66MU089tdTD6VKOZ27Kdd188YtfbP7ziBEjYtSoUXHOOefEsmXL4rTTTivhyMroIsUjbr/99vjDH/4QTz/9dItfV3322WfHwYMHY+fOnS32f/vtt+Pss8/u5FF2vrbmpTWjRo2KiIgNGzZ0xtBKqrq6Os4999y47LLLYsGCBXHxxRfHgw8+WPbrpa15aU25rJcXXnghtm/fHpdeemlUVVVFVVVVNDQ0xEMPPRRVVVVx1llnle2aOdbcNDU1pWPKZd0crXfv3nHeeefFhg0bSv5zpmwCoSiKuP322+PJJ5+Mp556Kj71qU+12H7ZZZfFKaecEn/729+a71u3bl1s3ry5xWurJ5tjzUtr1qxZExER/fv37+DRdT2HDx+OAwcOlO16acuReWlNuayX8ePHxyuvvBJr1qxpvo0cOTKuv/765j+X65o51txUVlamY8pl3Rxt7969sXHjxujfv3/pf850+GWQXcStt95a9OrVq1i1alWxbdu25tt7773XvM8tt9xSDB48uHjqqaeKxsbGYvTo0cXo0aNLOOqOd6x52bBhQ/G9732vaGxsLDZt2lT89re/LYYMGVKMHTu2xCPveHPnzi0aGhqKTZs2FWvXri3mzp1bVFRUFCtWrCiKojzXS1F89LyU83ppzdFX5pfrmmnNh+emnNfNnDlzilWrVhWbNm0qnn322eLqq68uzjzzzGL79u1FUZR2zZRNIEREq7ef//znzfvs37+/uO2224o+ffoUn/jEJ4ovf/nLxbZt20o36E5wrHnZvHlzMXbs2OKMM84oampqinPPPbe48847i127dpV24J3ghhtuKM4555yiurq66NevXzF+/PjmOCiK8lwvRfHR81LO66U1RwdCua6Z1nx4bsp53UydOrXo379/UV1dXQwYMKCYOnVqsWHDhubtpVwzft0zAJCUzTUIAMDxEwgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQhQZp577rmorKyMa6+9ttRDAbowb7UMZeamm26K7t27x5IlS2LdunVRW1tb6iEBXZBnEKCM7N27N+rr6+PWW2+Na6+9Nurq6lps/93vfhfDhg2LU089Na666qr4xS9+ERUVFS1+H/3q1atjzJgxcdppp8WgQYNi5syZsW/fvs79QoAOJxCgjCxbtizOP//8GD58eHzta1+Ln/3sZ3HkScRNmzbFV77ylZg4cWK8/PLLcfPNN8e3v/3tFsdv3LgxvvCFL8TkyZNj7dq1UV9fH6tXr47bb7+9FF8O0IG8xABl5IorrogpU6bErFmz4tChQ9G/f/94/PHHY9y4cTF37tz44x//GK+88krz/t/5znfi/vvvjx07dkTv3r3jpptuisrKynj00Ueb91m9enVceeWVsW/fvjj11FNL8WUBHcAzCFAm1q1bF//4xz/iq1/9akREVFVVxdSpU2PJkiXN2y+//PIWx3z2s59t8fHLL78cdXV10b179+bbNddcE4cPH45NmzZ1zhcCdIqqUg8A6BxLliyJQ4cOtbgosSiKqKmpiZ/85CfH9Tn27t0bN998c8ycOTNtGzx48AkbK1B6AgHKwKFDh+KXv/xl/PCHP4wJEya02DZx4sT49a9/HcOHD48//elPLbY9//zzLT6+9NJL4/XXX49zzz23w8cMlJZrEKAM/OY3v4mpU6fG9u3bo1evXi223X333fHUU0/FsmXLYvjw4XHHHXfEjTfeGGvWrIk5c+bEv//979i5c2f06tUr1q5dG5/73OfihhtuiJtuuilOP/30eP3112PlypXH/SwE8PHgGgQoA0uWLImrr746xUFExOTJk6OxsTH27NkTTzzxRCxfvjxGjBgRDz/8cPP/YqipqYmIiBEjRkRDQ0P861//ijFjxsRnPvOZmD9/vvdSgJOQZxCANt1///3xyCOPxJYtW0o9FKCTuQYBaLZ48eK4/PLLo2/fvvHss8/GAw884D0OoEwJBKDZ+vXr4/vf/3785z//icGDB8ecOXNi3rx5pR4WUAJeYgAAEhcpAgCJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgOT/ADGZCCNItqhXAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Age']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "mIeaOAdjoF1D",
        "outputId": "5a1ec34e-408b-4e64-9bfc-4678bcafb27a"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      18\n",
              "1      19\n",
              "2      19\n",
              "3      19\n",
              "4      20\n",
              "       ..\n",
              "175    40\n",
              "176    42\n",
              "177    45\n",
              "178    47\n",
              "179    48\n",
              "Name: Age, Length: 180, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Clipped the date between 5 and 95 percentile\n",
        "df['Age']= np.clip(df['Age'],np.percentile(df['Age'],5),np.percentile(df['Age'],95)).apply(lambda x: round(int(x)))\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "F061hDfvod98",
        "outputId": "b982a385-7d78-47fe-d881-8dce8b56bcdc"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0     KP281   20    Male         14        Single      3        4   29562   \n",
              "1     KP281   20    Male         15        Single      2        3   31836   \n",
              "2     KP281   20  Female         14     Partnered      4        3   30699   \n",
              "3     KP281   20    Male         12        Single      3        3   32973   \n",
              "4     KP281   20    Male         13     Partnered      4        2   35247   \n",
              "..      ...  ...     ...        ...           ...    ...      ...     ...   \n",
              "175   KP781   40    Male         21        Single      6        5   83416   \n",
              "176   KP781   42    Male         18        Single      5        4   89641   \n",
              "177   KP781   43    Male         16        Single      5        5   90886   \n",
              "178   KP781   43    Male         18     Partnered      4        5  104581   \n",
              "179   KP781   43    Male         18     Partnered      4        5   95508   \n",
              "\n",
              "     Miles    Age_Group  \n",
              "0      112     Teenager  \n",
              "1       75  Young Adult  \n",
              "2       66  Young Adult  \n",
              "3       85  Young Adult  \n",
              "4       47  Young Adult  \n",
              "..     ...          ...  \n",
              "175    200        Adult  \n",
              "176    200          Old  \n",
              "177    160          Old  \n",
              "178    120          Old  \n",
              "179    180          Old  \n",
              "\n",
              "[180 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2a758627-4dad-4b62-a819-1d25dac4f6ef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>29562</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>31836</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>30699</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>12</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>32973</td>\n",
              "      <td>85</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>13</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>KP781</td>\n",
              "      <td>40</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>Single</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>83416</td>\n",
              "      <td>200</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>KP781</td>\n",
              "      <td>42</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>89641</td>\n",
              "      <td>200</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>16</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>90886</td>\n",
              "      <td>160</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>104581</td>\n",
              "      <td>120</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>95508</td>\n",
              "      <td>180</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a758627-4dad-4b62-a819-1d25dac4f6ef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2a758627-4dad-4b62-a819-1d25dac4f6ef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2a758627-4dad-4b62-a819-1d25dac4f6ef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eb84ecd5-3229-4b53-baca-eb35ec316783\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb84ecd5-3229-4b53-baca-eb35ec316783')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eb84ecd5-3229-4b53-baca-eb35ec316783 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_db280bde-aea9-43c0-ae42-327d33d28982\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_db280bde-aea9-43c0-ae42-327d33d28982 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 20,\n        \"max\": 43,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          28,\n          36,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 12,\n        \"max\": 21,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16506,\n        \"min\": 29562,\n        \"max\": 104581,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          88396,\n          103336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 21,\n        \"max\": 360,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          95,\n          169\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Young Adult\",\n          \"Old\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Age'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "ZsVxxVDtovz5",
        "outputId": "34480a78-3efd-498e-86da-dbcd623aeed8"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Age'>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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R6xYsSIuu+yy9KNHjN7KlSvjC1/4QsyaNSsGBwdjzZo18Yc//CE2btxoL1TRB62DvVAdzc3Nw86Biog49dRTY/r06ZX32w9VUtaPT0TEMS+/+MUvKtc5cOBA8d3vfrdoa2srPvKRjxTXXXdd8dZbb5U18rh0vHV48803i8suu6yYNm1a0djYWMyZM6e44447ir1795Y7+Dhz4403FmeeeWbR0NBQfOxjHysWLlxY/Pa3v60ctxeq44PWwV4oz/t/vNR+qA5/7hkASEo/SREAqD0CAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCASaYLVu2xOTJk2PRokVljwLUML9qGSaYpUuXRlNTU6xevTp6enqivb297JGAGuQZBJhA9u3bF08++WR85zvfiUWLFsVjjz027Pizzz4bZ599dkyZMiU+97nPxeOPPx51dXWxZ8+eynU2b94cl156aUydOjU6Ojrilltuif3791f3EwHGnECACeSpp56Kc845J+bOnRtf//rX49FHH42jTyK+8cYb8aUvfSkWL14c27dvj5tvvjl+8IMfDLt9b29vXHPNNbFkyZLYsWNHPPnkk7F58+ZYtmxZGZ8OMIa8xAATyCWXXBJf/vKXY/ny5XH48OGYMWNGrF27Nq644or4/ve/Hy+88ELs3Lmzcv0f/vCHcffdd0d/f3+cdtppsXTp0pg8eXI8/PDDlets3rw5Lr/88ti/f39MmTKljE8LGAOeQYAJoqenJ/785z/HV77ylYiIqK+vjxtuuCFWr15dOT5//vxht/nMZz4z7O3t27fHY489Fk1NTZXL1VdfHUNDQ/HGG29U5xMBqqK+7AGA6li9enUcPnx42EmJRVFEY2NjPPjggyd0H/v27Yubb745brnllnRs1qxZJ21WoHwCASaAw4cPxy9/+cu477774qqrrhp2bPHixfHrX/865s6dGy+++OKwY1u3bh329oUXXhivvfZazJkzZ8xnBsrlHASYAJ5++um44YYbYvfu3dHa2jrs2J133hkvv/xyPPXUUzF37txYsWJF3HTTTdHd3R233357/Otf/4o9e/ZEa2tr7NixIy6++OK48cYbY+nSpXHqqafGa6+9Fps2bTrhZyGA/w7OQYAJYPXq1XHllVemOIiIWLJkSbzyyisxODgY69ati/Xr18e8efPioYceqvwUQ2NjY0REzJs3L7q6uuLvf/97XHrppfGpT30qfvSjH/ldCjAOeQYBGNHdd98dP//5z2PXrl1ljwJUmXMQgIqf/exnMX/+/Jg+fXr88Y9/jHvvvdfvOIAJSiAAFf/4xz/iJz/5Sfz73/+OWbNmxe233x4rV64seyygBF5iAAASJykCAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACA5H8ArKHA74n1e5kAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Education'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "zsdaSVw0lwLo",
        "outputId": "da204a0a-ed7d-4184-a1e5-e58ae5b98ae8"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Education'>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Education']"
      ],
      "metadata": {
        "id": "jyH0IWjmpmFI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "outputId": "7980508e-e803-4287-eb4b-265c7c15801b"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      14\n",
              "1      15\n",
              "2      14\n",
              "3      12\n",
              "4      13\n",
              "       ..\n",
              "175    21\n",
              "176    18\n",
              "177    16\n",
              "178    18\n",
              "179    18\n",
              "Name: Education, Length: 180, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Education</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Clipped the date between 5 and 95 percentile\n",
        "df['Education']= np.clip(df['Education'],np.percentile(df['Education'],5),np.percentile(df['Education'],95)).apply(lambda x: round(int(x)))\n",
        "df['Education']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "AHFac3LAwWdy",
        "outputId": "d97dfa46-8b6d-4a00-9e7a-a62c670e399a"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      14\n",
              "1      15\n",
              "2      14\n",
              "3      14\n",
              "4      14\n",
              "       ..\n",
              "175    18\n",
              "176    18\n",
              "177    16\n",
              "178    18\n",
              "179    18\n",
              "Name: Education, Length: 180, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Education</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Education'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "6twQRpyewxls",
        "outputId": "8b2ae0fa-cdfd-48fb-cf9e-bd5052182913"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Education\n",
              "16    85\n",
              "14    63\n",
              "18    27\n",
              "15     5\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Education'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "E-vYEaWtwl2U",
        "outputId": "6309339b-8996-4194-b07d-93fa1918013d"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Education'>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Usage'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "6yQFxgZnmGOr",
        "outputId": "37a62d11-c59c-4288-fc7d-04c98be7545d"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Usage'>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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ora2Nk444YT485//HLW1tUWPVlbq6upi3rx5MX369Pjud78bQ4YMiVmzZsUFF1xQ9GhlZ+HChbFq1aq45JJLCp2jWy5SBACK1e0WKQIAxRMIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIUAZOPPHEaGhoSOfPmTMn+vbtW/J5gD2fQAAAEoEAe4lFixbFxz72sdhnn32ib9++MXbs2Fi5cmVERKxYsSLOOuus2G+//WLfffeNurq6WLhw4Q63X7t2bZxxxhnRu3fvGDJkSDQ2NsbBBx8cs2bN6rzOxo0b47LLLova2tqoqamJT37yk7Fs2bJSPk1gNxEIsBfYunVrnH322fGJT3winnvuuXjyySdj8uTJUVFRERERbW1t8elPfzoeeuihWLp0aZx22mlx5plnxqpVqzrv48ILL4w1a9bEokWL4je/+U3cfvvtsW7duh0e57zzzot169bF/Pnz4+mnn45Ro0bFySefHG+//XZJny/wv+s2f+4Z6DotLS2xadOm+MxnPhOHHHJIREQcfvjhnZcfddRRcdRRR3WevuGGG2LevHlx3333xdSpU+PFF1+MhQsXRlNTU4wePToiIu64444YPnx4520ee+yxeOqpp2LdunXRq1eviIi45ZZb4t5774277747Jk+eXIqnCuwmAgH2Av3794/6+vo49dRT45RTTonx48fHhAkTYv/994+I9/YgXHfddfH73/8+1q5dG1u3bo3Nmzd37kF46aWXorKyMkaNGtV5n8OGDYt+/fp1nl62bFm0tbXFgAEDdnjszZs3x4oVK0rwLIHdSSBAGaipqYlNmzal8zdu3Bh9+vSJiIjZs2fHtGnT4o9//GPMnTs3vvOd78SCBQviuOOOiyuvvDIWLFgQt9xySwwbNix69+4dn/vc52LLli07PUNbW1vsv//+sWjRonSZb1LAnkcgQBk49NBD48EHH0znP/PMMzFixIjO00cffXQcffTRMX369BgzZkw0NjbGcccdF48//njU19fHOeecExHvfdi/9tprO9z/1q1bY+nSpXHMMcdERMQrr7wSGzZs6LzOqFGj4s0334zKyso4+OCDu+aJAiVjkSKUgcsvvzxefvnlmDZtWjz33HPx0ksvxcyZM+OXv/xlfP3rX49XX301pk+fHk8++WSsXLkyHnzwwVi+fHnnOoThw4fHPffcE88++2wsW7YsJk2aFO3t7Z33f9hhh8X48eNj8uTJ8dRTT8XSpUtj8uTJ0bt3786FjuPHj48xY8bE2WefHQ8++GC89tpr8cQTT8S3v/3tWLJkSSHbBdh1AgHKwNChQ+PRRx+NF198McaPHx/HHnts/OpXv4pf//rXcdppp8WHPvShePHFF+Ozn/1sjBgxIiZPnhxTpkyJL3/5yxERMXPmzOjXr18cf/zxceaZZ8app566w3qDiIif/exnsd9++8W4cePinHPOiS996UtRXV0dH/zgByMioqKiIv7whz/EuHHj4uKLL44RI0bE5z//+Vi5cmXst99+Jd8mwP+moqOjo6PoIYA9zxtvvBGDBw+OhQsXxsknn1z0OMBuJhCAnfLwww9HW1tbHHHEEbF27dq46qqrYvXq1fHyyy/HBz7wgaLHA3YzixSBnfLuu+/G1VdfHc3NzVFdXR3HH398/OIXvxAHUKbsQQAAEosUAYBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQPL/ABPO86KWj7uSAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Usage'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "JRXl9vj2w-jD",
        "outputId": "0775f137-ea9a-4019-cd12-438e63060a46"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Usage\n",
              "3    69\n",
              "4    52\n",
              "2    33\n",
              "5    17\n",
              "6     7\n",
              "7     2\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Usage']= np.clip(df['Usage'],np.percentile(df['Usage'],5),np.percentile(df['Usage'],95)).apply(lambda x: round(int(x)))\n",
        "df['Usage']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "BwBuH8rzxCkc",
        "outputId": "111761a7-d742-4aa9-f47b-919cd6c8f62c"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      3\n",
              "1      2\n",
              "2      4\n",
              "3      3\n",
              "4      4\n",
              "      ..\n",
              "175    5\n",
              "176    5\n",
              "177    5\n",
              "178    4\n",
              "179    4\n",
              "Name: Usage, Length: 180, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Usage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Usage'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "l-4zp9CexJNG",
        "outputId": "60edf22d-a791-4a2d-ce8d-3bc30a66b410"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Usage\n",
              "3    69\n",
              "4    52\n",
              "2    33\n",
              "5    26\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Usage'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "aB73ml33xOfB",
        "outputId": "56ff72dc-ca5e-445d-a0f6-9c9840ecca89"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Usage'>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAggAAAGwCAYAAADMjZ3mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAUWklEQVR4nO3df6zVdf3A8ddFuEB5+WEZQtyQ3xgBAzW8uKQJhUlO7IdarrQsnIMpy2pQbcj8Q7eYy62t0VywtszQpLXU5KIDJtJEfsMC5YKIAfJHyA8jEu7n+4fzfr28uHC5cu+53vN4bHfznPP5nPs+7712z5PDR25FURRFAAB8QKdSLwAAaH8EAgCQCAQAIBEIAEAiEACARCAAAIlAAACSzi09sb6+Pvbu3RtVVVVRUVFxPtcEALSSoijiyJEj0a9fv+jUqenPCVocCHv37o3q6uqWng4AlNCePXuif//+TT7e4kCoqqpq+AY9evRo6dMAAG3o8OHDUV1d3fA+3pQWB8L7f63Qo0cPgQAAHzFnuzzARYoAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQNK51AuAtrR37944ePBgqZdBB9O7d+/o169fqZcB55VAoGxs3rw5br7l5qg/WV/qpdDBVHatjOf+/pxIoEMRCJSNXbt2Rf3J+jgy9Ei8+6l3S70cOogLjl4QPTf2jIMHDwoEOhSBQNmp/1h9nOh5otTLAGjXXKQIACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgKTdBcKxY8di69atcezYsVIvBQBKoj28F7a7QNi5c2d87Wtfi507d5Z6KQBQEu3hvbDdBQIAUHoCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAks7NPfD48eNx/PjxhtuHDx9ulQW9r66urlWfn/Lz5ptvlnoJdGB+ZnE+tYd5anYgPPjggzFv3rzWXEsjP/nJT9rsewF8WH5m0dE0OxDmzJkTP/rRjxpuHz58OKqrq1tlURERv/zlL2Pw4MGt9vyUnxUrVsQjjzxS6mXQQfmZxflUV1dX8uhsdiB07do1unbt2ppraWTw4MExcuTINvt+dHzt4SM7Oi4/s+hoXKQIACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAknYXCIMGDYqnnnoqBg0aVOqlAEBJtIf3ws4l+85N6N69e4wcObLUywCAkmkP74Xt7hMEAKD0BAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAABJ51IvANpap/90is6HjD7nxwVHLyj1EqBV+ClJ2Rg4cGB0uqBTVL1WFfFaqVdDR1LZtTJ69+5d6mXAeSUQKBujRo2K55c9HwcPHiz1UuhgevfuHf369Sv1MuC8EgiUlX79+vlBDtAMLlIEABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAAJLOLT2xKIqIiDh8+PB5WwwA0Lref99+/328KS0OhCNHjkRERHV1dUufAgAokSNHjkTPnj2bfLyiOFtCNKG+vj727t0bVVVVUVFR0eIFnurw4cNRXV0de/bsiR49epy35+2o7Ffz2avms1fNZ6+az141X2vuVVEUceTIkejXr1906tT0lQYt/gShU6dO0b9//5aeflY9evQwQOfAfjWfvWo+e9V89qr57FXztdZenemTg/e5SBEASAQCAJC0u0Do2rVrzJ07N7p27VrqpXwk2K/ms1fNZ6+az141n71qvvawVy2+SBEA6Lja3ScIAEDpCQQAIBEIAEAiEACApE0D4cEHH4wrr7wyqqqq4lOf+lRMmzYttm/fftbznnjiiRgxYkR069YtRo0aFc8880wbrLb0WrJfixYtioqKikZf3bp1a6MVl85vfvObGD16dMM/KlJTUxPPPvvsGc8p17k6170q15k6nYceeigqKipi1qxZZzyuXGfrg5qzV+U6W/fff3963SNGjDjjOaWYqTYNhBUrVsSMGTPiH//4R9TW1sa7774bX/7yl+Odd95p8pyXXnopvvWtb8Wdd94Z69evj2nTpsW0adNiy5Ytbbjy0mjJfkW89y9v7du3r+Fr9+7dbbTi0unfv3889NBDsXbt2njllVfi2muvjRtvvDG2bt162uPLea7Oda8iynOmTrVmzZpYsGBBjB49+ozHlfNsva+5exVRvrM1cuTIRq/7xRdfbPLYks1UUUIHDhwoIqJYsWJFk8fcfPPNxdSpUxvdN378+OKuu+5q7eW1O83Zr4ULFxY9e/Zsu0W1Y7179y4effTR0z5mrho7016ZqaI4cuRIMXTo0KK2traYOHFice+99zZ5bLnP1rnsVbnO1ty5c4sxY8Y0+/hSzVRJr0E4dOhQRERcdNFFTR6zevXqmDx5cqP7pkyZEqtXr27VtbVHzdmviIijR4/GgAEDorq6+qx/MuyITp48GY8//ni88847UVNTc9pjzNV7mrNXEWZqxowZMXXq1DQzp1Pus3UuexVRvrP12muvRb9+/WLQoEFx2223xRtvvNHksaWaqRb/sqYPq76+PmbNmhVXX311fO5zn2vyuP3790efPn0a3denT5/Yv39/ay+xXWnufg0fPjx+97vfxejRo+PQoUMxf/78mDBhQmzdurVVf7lWe7B58+aoqamJ//73v3HhhRfGkiVL4rOf/expjy33uTqXvSrnmYqIePzxx2PdunWxZs2aZh1fzrN1rntVrrM1fvz4WLRoUQwfPjz27dsX8+bNiy984QuxZcuWqKqqSseXaqZKFggzZsyILVu2nPHvXfh/zd2vmpqaRn8SnDBhQlx22WWxYMGCeOCBB1p7mSU1fPjw2LBhQxw6dCiefPLJuP3222PFihVNvvGVs3PZq3KeqT179sS9994btbW1ZXHx3IfRkr0q19n6yle+0vDfo0ePjvHjx8eAAQNi8eLFceedd5ZwZY2VJBBmzpwZf/vb32LlypVnrcRLLrkk3nrrrUb3vfXWW3HJJZe05hLblXPZr1N16dIlxo4dGzt27Gil1bUflZWVMWTIkIiIuPzyy2PNmjXxyCOPxIIFC9Kx5T5X57JXpyqnmVq7dm0cOHAgxo0b13DfyZMnY+XKlfHrX/86jh8/HhdccEGjc8p1tlqyV6cqp9n6oF69esWwYcOafN2lmqk2vQahKIqYOXNmLFmyJF544YUYOHDgWc+pqamJ559/vtF9tbW1Z/z70o6iJft1qpMnT8bmzZujb9++rbDC9q2+vj6OHz9+2sfKea5O50x7dapymqlJkybF5s2bY8OGDQ1fV1xxRdx2222xYcOG077hletstWSvTlVOs/VBR48ejbq6uiZfd8lmqlUvgTzF3XffXfTs2bNYvnx5sW/fvoav//znPw3HfOc73ylmz57dcHvVqlVF586di/nz5xf//Oc/i7lz5xZdunQpNm/e3JZLL4mW7Ne8efOK5557rqirqyvWrl1b3HrrrUW3bt2KrVu3luIltJnZs2cXK1asKHbt2lVs2rSpmD17dlFRUVEsXbq0KApz9UHnulflOlNNOfXKfLPVtLPtVbnO1n333VcsX7682LVrV7Fq1api8uTJxSc/+cniwIEDRVG0n5lq00CIiNN+LVy4sOGYiRMnFrfffnuj8xYvXlwMGzasqKysLEaOHFk8/fTTbbnskmnJfs2aNav4zGc+U1RWVhZ9+vQprr/++mLdunVtv/g29v3vf78YMGBAUVlZWVx88cXFpEmTGt7wisJcfdC57lW5zlRTTn3TM1tNO9telets3XLLLUXfvn2LysrK4tOf/nRxyy23FDt27Gh4vL3MlF/3DAAkfhcDAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBOgAvvjFL8asWbPS/YsWLYpevXq1+XqAjz6BAAAkAgHKxPLly+Pzn/98fPzjH49evXrF1VdfHbt3746IiLq6urjxxhujT58+ceGFF8aVV14Zy5Yta3T+vn37YurUqdG9e/cYOHBgPPbYY3HppZfGr371q4Zj3n777fjBD34QF198cfTo0SOuvfba2LhxY1u+TOA8EQhQBk6cOBHTpk2LiRMnxqZNm2L16tUxffr0qKioiIj3fh/99ddfH88//3ysX78+rrvuurjhhhvijTfeaHiO7373u7F3795Yvnx5/PnPf47f/va3ceDAgUbf55vf/GYcOHAgnn322Vi7dm2MGzcuJk2aFP/+97/b9PUCH17nUi8AaH2HDx+OQ4cOxVe/+tUYPHhwRERcdtllDY+PGTMmxowZ03D7gQceiCVLlsRf//rXmDlzZmzbti2WLVsWa9asiSuuuCIiIh599NEYOnRowzkvvvhivPzyy3HgwIHo2rVrRETMnz8//vKXv8STTz4Z06dPb4uXCpwnAgHKwEUXXRR33HFHTJkyJb70pS/F5MmT4+abb46+fftGxHufINx///3x9NNPx759++LEiRNx7Nixhk8Qtm/fHp07d45x48Y1POeQIUOid+/eDbc3btwYR48ejU984hONvvexY8eirq6uDV4lcD4JBOgAevToEYcOHUr3v/3229GzZ8+IiFi4cGHcc8898fe//z3+9Kc/xS9+8Yuora2Nq666Kn784x9HbW1tzJ8/P4YMGRLdu3ePb3zjG/G///2v2Ws4evRo9O3bN5YvX54e839SwEePQIAOYPjw4bF06dJ0/7p162LYsGENt8eOHRtjx46NOXPmRE1NTTz22GNx1VVXxapVq+KOO+6Im266KSLee7N//fXXGz3/iRMnYv369XH55ZdHRMSOHTvi4MGDDceMGzcu9u/fH507d45LL720dV4o0GZcpAgdwN133x2vvvpq3HPPPbFp06bYvn17PPzww/HHP/4x7rvvvti1a1fMmTMnVq9eHbt3746lS5fGa6+91nAdwtChQ+Opp56KDRs2xMaNG+Pb3/521NfXNzz/iBEjYvLkyTF9+vR4+eWXY/369TF9+vTo3r17w4WOkydPjpqampg2bVosXbo0Xn/99XjppZfi5z//ebzyyisl2Reg5QQCdACDBg2KlStXxrZt22Ly5Mkxfvz4WLx4cTzxxBNx3XXXxcc+9rHYtm1bfP3rX49hw4bF9OnTY8aMGXHXXXdFRMTDDz8cvXv3jgkTJsQNN9wQU6ZMaXS9QUTE73//++jTp09cc801cdNNN8UPf/jDqKqqim7dukVEREVFRTzzzDNxzTXXxPe+970YNmxY3HrrrbF79+7o06dPm+8J8OFUFEVRlHoRwEfPm2++GdXV1bFs2bKYNGlSqZcDnGcCAWiWF154IY4ePRqjRo2Kffv2xU9/+tP417/+Fa+++mp06dKl1MsDzjMXKQLN8u6778bPfvaz2LlzZ1RVVcWECRPiD3/4gziADsonCABA4iJFACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkPwfl4bETGgucCoAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Fitness'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "YCx02hnGmMiN",
        "outputId": "00c6b74a-41e8-4557-d516-06b7583313e4"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Fitness'>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Fitness'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "bdjHJm0xxZ1l",
        "outputId": "2fa112b2-ca60-4973-d4b6-f4c5999178bc"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fitness\n",
              "3    97\n",
              "5    31\n",
              "2    26\n",
              "4    24\n",
              "1     2\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#clip fitness data\n",
        "df['Fitness']= np.clip(df['Fitness'],np.percentile(df['Fitness'],5),np.percentile(df['Fitness'],95)).apply(lambda x: round(int(x)))\n",
        "df['Fitness']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "_baxfGbixcGV",
        "outputId": "6455a87a-1b72-4aca-a17c-8db685392195"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      4\n",
              "1      3\n",
              "2      3\n",
              "3      3\n",
              "4      2\n",
              "      ..\n",
              "175    5\n",
              "176    4\n",
              "177    5\n",
              "178    5\n",
              "179    5\n",
              "Name: Fitness, Length: 180, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Fitness</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Fitness'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "7eT45eDjxiJH",
        "outputId": "849c6dc6-c33c-4cc1-84e1-dfe22fe01340"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fitness\n",
              "3    97\n",
              "5    31\n",
              "2    28\n",
              "4    24\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Fitness'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "cYE2xvUlxmsa",
        "outputId": "ca424268-98c9-405c-9d15-0168f0ae2268"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Fitness'>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Income'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "GCnnMWYKmTGa",
        "outputId": "ad7dc017-9782-4ae4-9faf-211d356182e0"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Income'>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Income'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "uwgRxCdLxptu",
        "outputId": "c1ad26c0-4a58-4aeb-866f-aec5fad5c2bc"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Income\n",
              "45480    14\n",
              "52302     9\n",
              "46617     8\n",
              "54576     8\n",
              "53439     8\n",
              "         ..\n",
              "65220     1\n",
              "55713     1\n",
              "68220     1\n",
              "30699     1\n",
              "95508     1\n",
              "Name: count, Length: 62, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>45480</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52302</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46617</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54576</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53439</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65220</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55713</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68220</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30699</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95508</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>62 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Clip the Income data\n",
        "df['Income']= np.clip(df['Income'],np.percentile(df['Income'],5),np.percentile(df['Income'],95)).apply(lambda x: round(int(x)))\n",
        "df['Income']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "O7nKDtNNxvgp",
        "outputId": "474500d3-bbfe-4242-920f-5e40706ab74b"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      34053\n",
              "1      34053\n",
              "2      34053\n",
              "3      34053\n",
              "4      35247\n",
              "       ...  \n",
              "175    83416\n",
              "176    89641\n",
              "177    90886\n",
              "178    90948\n",
              "179    90948\n",
              "Name: Income, Length: 180, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>34053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>34053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>34053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>34053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>35247</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>83416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>89641</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>90886</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>90948</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>90948</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Income'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1808
        },
        "id": "eD2Zro6Hxzkk",
        "outputId": "fdcddcb5-4d9d-42da-ecf2-49571c8ac14a"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Income\n",
              "45480    14\n",
              "52302     9\n",
              "34053     9\n",
              "90948     9\n",
              "54576     8\n",
              "46617     8\n",
              "53439     8\n",
              "51165     7\n",
              "50028     7\n",
              "40932     6\n",
              "48891     5\n",
              "34110     5\n",
              "35247     5\n",
              "38658     5\n",
              "43206     5\n",
              "57987     4\n",
              "36384     4\n",
              "44343     4\n",
              "60261     3\n",
              "90886     3\n",
              "59124     3\n",
              "64809     3\n",
              "67083     2\n",
              "48556     2\n",
              "37521     2\n",
              "39795     2\n",
              "88396     2\n",
              "83416     2\n",
              "64741     2\n",
              "49801     2\n",
              "56850     2\n",
              "61006     2\n",
              "89641     2\n",
              "61398     2\n",
              "47754     2\n",
              "42069     2\n",
              "54781     1\n",
              "74701     1\n",
              "85906     1\n",
              "52290     1\n",
              "77191     1\n",
              "55713     1\n",
              "68220     1\n",
              "69721     1\n",
              "75946     1\n",
              "58516     1\n",
              "70966     1\n",
              "62251     1\n",
              "65220     1\n",
              "62535     1\n",
              "57271     1\n",
              "48658     1\n",
              "53536     1\n",
              "52291     1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>45480</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52302</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34053</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90948</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54576</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46617</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53439</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51165</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50028</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40932</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48891</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34110</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35247</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38658</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43206</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57987</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36384</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44343</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60261</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90886</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59124</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64809</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67083</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48556</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37521</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39795</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88396</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>83416</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64741</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49801</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56850</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61006</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89641</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61398</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47754</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42069</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54781</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74701</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85906</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52290</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77191</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55713</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68220</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69721</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75946</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58516</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70966</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62251</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65220</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62535</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57271</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48658</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53536</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52291</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Income'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "ekpCV3Pqx5QP",
        "outputId": "dadfa134-b6a6-46aa-be00-254321b1db58"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Income'>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Miles'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "0Ds71uVImZkh",
        "outputId": "7460462d-ce99-40dc-9668-a558bcb29738"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Miles'>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAggAAAGwCAYAAADMjZ3mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAZYElEQVR4nO3de4xU5fnA8WdZYIOF5eJyWwEFBK2KVKAhG1NrhSKGNCrVeMHgpdoqEK81Yk29tH9otLE/m1ht0lRq06rVYE2ttNgqWJBSlwIiGgKIYgVEuaNcBN7fH5bR5QXBlZ1Zhs8nIXH3nJnznmfPuF9mZpeKlFIKAIDPaFHqBQAAzY9AAAAyAgEAyAgEACAjEACAjEAAADICAQDItGzsDXft2hUrVqyIdu3aRUVFxcFcEwDQRFJKsWnTpqitrY0WLfb9PEGjA2HFihXRs2fPxt4cACihd955J3r06LHP7Y0OhHbt2hUOUF1d3di7AQCKaOPGjdGzZ8/C9/F9aXQg7H5Zobq6WiAAwCFmf28P8CZFACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAg07LUCyBixYoVsW7dulIvo6Q6duwYtbW1pV4GAP8jEEpsxYoVcebIM2P7tu2lXkpJta5qHX/7699EAkAzIRBKbN26dbF92/bYMHBD7Gy7s9TLKajcXBnt57cvyrp2H2vdunUCAaCZEAjNxM62O2NH+x2lXkamua4LgKblTYoAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAmWYXCFu2bImFCxfGli1bSr0UOOR5PAGN1ewC4c0334zRo0fHm2++WeqlwCHP4wlorGYXCABA6QkEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMi1LvQCg9Hbu3Bn19fXx/vvvR+fOnWPIkCFRWVl5QLddu3ZtjB07NlavXh1dunSJRx99NDp16lSUYzelYq2rmOdfrscqN81ldgIBDnNTp06Ne+65J959993C54466qiYOHFijBgx4nNve+qpp8YHH3xQ+HjDhg1RV1cXNTU1MXPmzCY9dlMq1rqKef7leqxy05xm5yUGOIxNnTo1rr322ujfv3888cQT8Z///CeeeOKJ6N+/f1x77bUxderUfd72s3EwcODAmDRpUgwcODAiIj744IM49dRTm+zYTalY6yrm+ZfrscpNc5tdRUopNeaGGzdujPbt28eGDRuiurr6oC1o4cKFMXr06Jg8eXKceOKJB+1+m6vd57v21LWxo/2OUi+noOWGltFpZqeirGv3sQ6Xr3kxfd7jaefOnfHtb387+vfvH7/85S+jRYtP/76wa9euGDduXCxevDimTp2aPb25du3aqKuri4iIOXPmRNu2bQvbNm/eHIMHD46IiFmzZu315YYvc+ymVKx1FfP8y/VY5aaYszvQ798H/BLDtm3bYtu2bQ0O0JSWLl3apPffXBwu53kgzOLg+7yZ1tfXx7vvvhv3339/g/8ZRUS0aNEifvCDH8SFF14Y9fX1MXTo0Abbx44dGxGfPHPw2TiIiGjbtm0MGDAgFixYEGPHjo1nn332oB67KRVrXcU8/3I9VrlpjrM74EC4++6746677mrKtTRw8803F+1YNA++5sX1/vvvR0REv3799rp99+d37/dZq1evjoiIG264Ya+3ve666+LKK68s7Hcwj92UirWuYp5/uR6r3DTH2R1wINx6661x4403Fj7euHFj9OzZs0kWFRFx3333Rd++fZvs/puLpUuX+sb4P4fL17yYPu/66ty5c0RELF68OL72ta9l2xcvXtxgv8/q0qVLbNiwIX7+858XXmr4rAceeKCw38E+dlMq1rqKef7leqxy0xxnd8CBUFVVFVVVVU25lgb69u3r9ejDjK95cQ0ZMiSOOuqoePjhh/f6muevfvWr6NGjRwwZMiS77aOPPhp1dXUxf/782Lx5c/YehAULFhT2O9jHbkrFWlcxz79cj1VumuPs/BQDHKYqKytj4sSJMW3atBg3blzMnTs3Nm/eHHPnzo1x48bFtGnT4pZbbtnrG6I6deoUNTU1ERExePDgOO+88+Kf//xnnHfeeYU3KNbU1Ozz9yF8mWM3pWKtq5jnX67HKjfNcXZ+iqHE/BSDn2JoSgfyeNrbz1336NEjbrnlli/8exB2+zK/B+FAj92UirWuYp5/uR6r3BRjdgf9pxiA8jRixIgYNmxYo35z28yZM7/Ub1L8MsduSsVaVzHPv1yPVW6a0+wEAhCVlZWN/tGpTp067fVHGYtx7KZUrHUV8/zL9VjlprnMznsQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACDT7AKhT58+MXny5OjTp0+plwKHPI8noLFalnoBe2rTpk2ceOKJpV4GlAWPJ6Cxmt0zCABA6QkEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAg07LUC+ATlZsrS72EBnavpxjram7nDoBAKLmOHTtG66rW0X5++1IvZa+Kta7WVa2jY8eORTkWAPsnEEqstrY2/vbXv8W6detKvZSS6tixY9TW1pZ6GQD8j0BoBmpra31zBKBZ8SZFACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAg07KxN0wpRUTExo0bD9piAICmtfv79u7v4/vS6EDYtGlTRET07NmzsXcBAJTIpk2bon379vvcXpH2lxD7sGvXrlixYkW0a9cuKioqGr3AQ8nGjRujZ8+e8c4770R1dXWpl1My5vAps/iEOXzKLD5lFp9obnNIKcWmTZuitrY2WrTY9zsNGv0MQosWLaJHjx6Nvfkhrbq6ull8kUvNHD5lFp8wh0+ZxafM4hPNaQ6f98zBbt6kCABkBAIAkBEIX0BVVVXccccdUVVVVeqllJQ5fMosPmEOnzKLT5nFJw7VOTT6TYoAQPnyDAIAkBEIAEBGIAAAGYEAAGQEwh7uvPPOqKioaPDn+OOPL2zfunVrjB8/Po488sho27ZtfPe734333nuvhCs+eF566aX4zne+E7W1tVFRURF/+tOfGmxPKcXtt98e3bt3jzZt2sTw4cNj8eLFDfZZu3ZtjBkzJqqrq6NDhw7xve99LzZv3lzEs/jy9jeHyy67LLtGRo4c2WCfcpjD3XffHV//+tejXbt20aVLlzjnnHNi0aJFDfY5kMfD8uXLY9SoUXHEEUdEly5d4uabb44dO3YU81S+tAOZxemnn55dF1dffXWDfQ71WTz00ENx8sknF37hT11dXUyZMqWw/XC5HiL2P4tyuB4Ewl6ceOKJsXLlysKfGTNmFLbdcMMN8ec//zmefPLJmD59eqxYsSJGjx5dwtUePB9++GEMHDgwHnzwwb1uv/fee+MXv/hFPPzwwzF79uz4yle+EmeeeWZs3bq1sM+YMWNi4cKF8fzzz8ezzz4bL730Unz/+98v1ikcFPubQ0TEyJEjG1wjjz32WIPt5TCH6dOnx/jx4+Nf//pXPP/88/Hxxx/HiBEj4sMPPyzss7/Hw86dO2PUqFGxffv2ePnll+O3v/1tTJo0KW6//fZSnFKjHcgsIiKuuuqqBtfFvffeW9hWDrPo0aNH3HPPPTFnzpyor6+PM844I84+++xYuHBhRBw+10PE/mcRUQbXQ6KBO+64Iw0cOHCv29avX59atWqVnnzyycLn3njjjRQRadasWUVaYXFERHr66acLH+/atSt169Yt3XfffYXPrV+/PlVVVaXHHnsspZTS66+/niIivfLKK4V9pkyZkioqKtK7775btLUfTHvOIaWULr300nT22Wfv8zblOIeUUlq9enWKiDR9+vSU0oE9Hp577rnUokWLtGrVqsI+Dz30UKqurk7btm0r7gkcRHvOIqWUvvnNb6brrrtun7cp11l07Ngx/frXvz6sr4fdds8ipfK4HjyDsBeLFy+O2tra6NOnT4wZMyaWL18eERFz5syJjz/+OIYPH17Y9/jjj49evXrFrFmzSrXcoli2bFmsWrWqwbm3b98+hg4dWjj3WbNmRYcOHWLIkCGFfYYPHx4tWrSI2bNnF33NTWnatGnRpUuXOO644+Kaa66JNWvWFLaV6xw2bNgQERGdOnWKiAN7PMyaNSsGDBgQXbt2Lexz5plnxsaNGxv8TetQs+csdvv9738fNTU1cdJJJ8Wtt94aH330UWFbuc1i586d8fjjj8eHH34YdXV1h/X1sOcsdjvUr4dG/2NN5Wro0KExadKkOO6442LlypVx1113xTe+8Y147bXXYtWqVdG6devo0KFDg9t07do1Vq1aVZoFF8nu8/vsxbz7493bVq1aFV26dGmwvWXLltGpU6eyms/IkSNj9OjR0bt371i6dGn86Ec/irPOOitmzZoVlZWVZTmHXbt2xfXXXx+nnnpqnHTSSRERB/R4WLVq1V6vmd3bDkV7m0VExMUXXxxHH3101NbWxquvvhq33HJLLFq0KCZPnhwR5TOLBQsWRF1dXWzdujXatm0bTz/9dJxwwgkxb968w+562NcsIsrjehAIezjrrLMK/33yySfH0KFD4+ijj44//vGP0aZNmxKujObiwgsvLPz3gAED4uSTT46+ffvGtGnTYtiwYSVcWdMZP358vPbaaw3ej3O42tcsPvsekwEDBkT37t1j2LBhsXTp0ujbt2+xl9lkjjvuuJg3b15s2LAhnnrqqbj00ktj+vTppV5WSexrFieccEJZXA9eYtiPDh06RP/+/WPJkiXRrVu32L59e6xfv77BPu+9915069atNAsskt3nt+c7kj977t26dYvVq1c32L5jx45Yu3ZtWc+nT58+UVNTE0uWLImI8pvDhAkT4tlnn40XX3yxwT/xfiCPh27duu31mtm97VCzr1nszdChQyMiGlwX5TCL1q1bx7HHHhuDBw+Ou+++OwYOHBgPPPDAYXk97GsWe3MoXg8CYT82b94cS5cuje7du8fgwYOjVatW8Y9//KOwfdGiRbF8+fIGrzuVo969e0e3bt0anPvGjRtj9uzZhXOvq6uL9evXx5w5cwr7vPDCC7Fr167Cg6Mc/fe//401a9ZE9+7dI6J85pBSigkTJsTTTz8dL7zwQvTu3bvB9gN5PNTV1cWCBQsaBNPzzz8f1dXVhadiDwX7m8XezJs3LyKiwXVRDrPY065du2Lbtm2H1fWwL7tnsTeH5PVQ6ndJNjc33XRTmjZtWlq2bFmaOXNmGj58eKqpqUmrV69OKaV09dVXp169eqUXXngh1dfXp7q6ulRXV1fiVR8cmzZtSnPnzk1z585NEZHuv//+NHfu3PT222+nlFK65557UocOHdIzzzyTXn311XT22Wen3r17py1bthTuY+TIkemUU05Js2fPTjNmzEj9+vVLF110UalOqVE+bw6bNm1KP/zhD9OsWbPSsmXL0t///vc0aNCg1K9fv7R169bCfZTDHK655prUvn37NG3atLRy5crCn48++qiwz/4eDzt27EgnnXRSGjFiRJo3b17661//mjp37pxuvfXWUpxSo+1vFkuWLEk/+clPUn19fVq2bFl65plnUp8+fdJpp51WuI9ymMXEiRPT9OnT07Jly9Krr76aJk6cmCoqKtLUqVNTSofP9ZDS58+iXK4HgbCHCy64IHXv3j21bt06HXXUUemCCy5IS5YsKWzfsmVLGjduXOrYsWM64ogj0rnnnptWrlxZwhUfPC+++GKKiOzPpZdemlL65Ecdf/zjH6euXbumqqqqNGzYsLRo0aIG97FmzZp00UUXpbZt26bq6up0+eWXp02bNpXgbBrv8+bw0UcfpREjRqTOnTunVq1apaOPPjpdddVVDX5UKaXymMPeZhAR6ZFHHinscyCPh7feeiudddZZqU2bNqmmpibddNNN6eOPPy7y2Xw5+5vF8uXL02mnnZY6deqUqqqq0rHHHptuvvnmtGHDhgb3c6jP4oorrkhHH310at26dercuXMaNmxYIQ5SOnyuh5Q+fxblcj34554BgIz3IAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAcfrpp8f1119f+PiYY46J//u//yvZeoDSEwhQpi677LKoqKiIq6++Ots2fvz4qKioiMsuuywiIiZPnhw//elPi7xCoDkTCFDGevbsGY8//nhs2bKl8LmtW7fGH/7wh+jVq1fhc506dYp27dqVYolAMyUQoIwNGjQoevbsGZMnTy58bvLkydGrV6845ZRTCp/b8yWGPa1fvz6uvPLK6Ny5c1RXV8cZZ5wR8+fPL2yfP39+fOtb34p27dpFdXV1DB48OOrr65vknIDiEAhQ5q644op45JFHCh//5je/icsvv/wL3cf5558fq1evjilTpsScOXNi0KBBMWzYsFi7dm1ERIwZMyZ69OgRr7zySsyZMycmTpwYrVq1OqjnARSXQIAyd8kll8SMGTPi7bffjrfffjtmzpwZl1xyyQHffsaMGfHvf/87nnzyyRgyZEj069cvfvazn0WHDh3iqaeeioiI5cuXx/Dhw+P444+Pfv36xfnnnx8DBw5sqlMCiqBlqRcANK3OnTvHqFGjYtKkSZFSilGjRkVNTc0B337+/PmxefPmOPLIIxt8fsuWLbF06dKIiLjxxhvjyiuvjN/97ncxfPjwOP/886Nv374H9TyA4hIIcBi44oorYsKECRER8eCDD36h227evDm6d+8e06ZNy7Z16NAhIiLuvPPOuPjii+Mvf/lLTJkyJe644454/PHH49xzz/2ySwdKRCDAYWDkyJGxffv2qKioiDPPPPML3XbQoEGxatWqaNmyZRxzzDH73K9///7Rv3//uOGGG+Kiiy6KRx55RCDAIcx7EOAwUFlZGW+88Ua8/vrrUVlZ+YVuO3z48Kirq4tzzjknpk6dGm+99Va8/PLLcdttt0V9fX1s2bIlJkyYENOmTSu8x+GVV16Jr371q010NkAxeAYBDhPV1dWNul1FRUU899xzcdttt8Xll18e77//fnTr1i1OO+206Nq1a1RWVsaaNWti7Nix8d5770VNTU2MHj067rrrroN8BkAxVaSUUqkXAQA0L15iAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAg8/+daZ5I1WvPEgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Miles'].value_counts()"
      ],
      "metadata": {
        "id": "z-bMXy6tmUqr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1275
        },
        "outputId": "d7c225eb-2f54-4ed5-d058-dd7bd34b1bc0"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Miles\n",
              "85     27\n",
              "95     12\n",
              "66     10\n",
              "75     10\n",
              "47      9\n",
              "106     9\n",
              "94      8\n",
              "113     8\n",
              "53      7\n",
              "100     7\n",
              "180     6\n",
              "200     6\n",
              "56      6\n",
              "64      6\n",
              "127     5\n",
              "160     5\n",
              "42      4\n",
              "150     4\n",
              "38      3\n",
              "74      3\n",
              "170     3\n",
              "120     3\n",
              "103     3\n",
              "132     2\n",
              "141     2\n",
              "280     1\n",
              "260     1\n",
              "300     1\n",
              "240     1\n",
              "112     1\n",
              "212     1\n",
              "80      1\n",
              "140     1\n",
              "21      1\n",
              "169     1\n",
              "188     1\n",
              "360     1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>160</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>150</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>132</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>280</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>300</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>240</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>212</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>169</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>360</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Clip the data\n",
        "df['Miles']= np.clip(df['Miles'],np.percentile(df['Miles'],5),np.percentile(df['Miles'],95)).apply(lambda x: round(int(x)))\n",
        "df['Miles']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "Ll3aLgdsyGGb",
        "outputId": "bcdb09ac-0274-471c-dc84-b87a99fb2a00"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      112\n",
              "1       75\n",
              "2       66\n",
              "3       85\n",
              "4       47\n",
              "      ... \n",
              "175    200\n",
              "176    200\n",
              "177    160\n",
              "178    120\n",
              "179    180\n",
              "Name: Miles, Length: 180, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Miles</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Miles'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 993
        },
        "id": "69uVb3MbyJSN",
        "outputId": "9dde2353-4dcf-44ce-959c-5aabeec51a04"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Miles\n",
              "85     27\n",
              "47     17\n",
              "95     12\n",
              "200    12\n",
              "66     10\n",
              "75     10\n",
              "106     9\n",
              "94      8\n",
              "113     8\n",
              "53      7\n",
              "100     7\n",
              "180     6\n",
              "56      6\n",
              "64      6\n",
              "160     5\n",
              "127     5\n",
              "150     4\n",
              "74      3\n",
              "170     3\n",
              "120     3\n",
              "103     3\n",
              "132     2\n",
              "141     2\n",
              "169     1\n",
              "140     1\n",
              "188     1\n",
              "80      1\n",
              "112     1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>160</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>150</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>132</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>169</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['Miles'],color='green',orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "X-T94I_DyNGv",
        "outputId": "e5ef6bea-9fff-46c6-836f-98edb907310b"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Miles'>"
            ]
          },
          "metadata": {},
          "execution_count": 58
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if features like marital status, Gender, and age have any effect on the product purchased\n",
        "\n",
        "#Find if there is any relationship between the categorical variables and the output\n",
        "#variable in the data.\n",
        "\n",
        "#Marital_status Vs product purchased\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "QcnsfHp-yuk0",
        "outputId": "8a414da2-fa29-4ae3-f83f-a87c07b88abf"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0     KP281   20    Male         14        Single      3        4   34053   \n",
              "1     KP281   20    Male         15        Single      2        3   34053   \n",
              "2     KP281   20  Female         14     Partnered      4        3   34053   \n",
              "3     KP281   20    Male         14        Single      3        3   34053   \n",
              "4     KP281   20    Male         14     Partnered      4        2   35247   \n",
              "..      ...  ...     ...        ...           ...    ...      ...     ...   \n",
              "175   KP781   40    Male         18        Single      5        5   83416   \n",
              "176   KP781   42    Male         18        Single      5        4   89641   \n",
              "177   KP781   43    Male         16        Single      5        5   90886   \n",
              "178   KP781   43    Male         18     Partnered      4        5   90948   \n",
              "179   KP781   43    Male         18     Partnered      4        5   90948   \n",
              "\n",
              "     Miles    Age_Group  \n",
              "0      112     Teenager  \n",
              "1       75  Young Adult  \n",
              "2       66  Young Adult  \n",
              "3       85  Young Adult  \n",
              "4       47  Young Adult  \n",
              "..     ...          ...  \n",
              "175    200        Adult  \n",
              "176    200          Old  \n",
              "177    160          Old  \n",
              "178    120          Old  \n",
              "179    180          Old  \n",
              "\n",
              "[180 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-103512ca-ab6a-4289-a9d2-4bdd872dd1da\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>34053</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>85</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>KP781</td>\n",
              "      <td>40</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>83416</td>\n",
              "      <td>200</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>KP781</td>\n",
              "      <td>42</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>89641</td>\n",
              "      <td>200</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>16</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>90886</td>\n",
              "      <td>160</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>90948</td>\n",
              "      <td>120</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>90948</td>\n",
              "      <td>180</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-103512ca-ab6a-4289-a9d2-4bdd872dd1da')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-103512ca-ab6a-4289-a9d2-4bdd872dd1da button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-103512ca-ab6a-4289-a9d2-4bdd872dd1da');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-26101086-d38f-4297-85a6-deba3621361e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26101086-d38f-4297-85a6-deba3621361e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-26101086-d38f-4297-85a6-deba3621361e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_091f77d6-26ea-471f-83b8-d16d65a3dbf8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_091f77d6-26ea-471f-83b8-d16d65a3dbf8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 20,\n        \"max\": 43,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          28,\n          36,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 14,\n        \"max\": 18,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15463,\n        \"min\": 34053,\n        \"max\": 90948,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          68220,\n          90948\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 47,\n        \"max\": 200,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          188,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Young Adult\",\n          \"Old\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby('MaritalStatus')['Product'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "9CppJH0ozCQm",
        "outputId": "07dcf2d8-9559-4e53-fe48-0484c25e904c"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MaritalStatus  Product\n",
              "Partnered      KP281      48\n",
              "               KP481      36\n",
              "               KP781      23\n",
              "Single         KP281      32\n",
              "               KP481      24\n",
              "               KP781      17\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Product</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Partnered</th>\n",
              "      <th>KP281</th>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Single</th>\n",
              "      <th>KP281</th>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='MaritalStatus',hue='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "dQohOnU3zFXr",
        "outputId": "ba8bb756-76d9-44b9-8d37-90f7410443be"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='MaritalStatus', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 61
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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kJteoXGxur48ePa9euXVq/fr2WLFmiU6dONeC7iKtiBmxs/fr15uuuu87s5uZm7tmzpzk+Pt78+eefW9ZLMm/cuNFsNpvNubm5Zknm5cuXW9Z/9dVXZknmw4cPm81ms3nQoEHm/v37W+1j6NChZm9vb8tyYmKiOTQ01LL8pz/9ybxmzRqrPnPmzDGHhYXV01ECxjdixAjz/fffbzabzebKykrzzp07za6uruZp06ZV2XbdunVmHx8fy/KqVavMksw5OTk1jnlRbT7no0ePNo8bN86q38cff2x2cHAw//bbb2az2Wxu06aNecCAAVbbXK7fkSNHzJLM+/bts6w/fPiwWZJ54cKFl3h3YCvMyMDmYmJidOLECW3ZskWRkZHKyMjQrbfeqtTU1Br7hISEWP5u2bKlJFn+xXTkyBHdfvvtVtv/9/LvFRcX67vvvtPo0aMtM0Senp567rnn9N13313FkQGNz9atW+Xp6Sk3NzdFRUVp0KBBSkpK0gcffKC+ffuqVatWatq0qYYNG6bTp0/r3Llzlr4uLi5Wn93LudTn/PPPP1dqaqrVZzYiIkKVlZXKzc219OvevbvVmJfrd/jwYTk5Oalbt26WPh07drzsqWnYDhf7wi64ubnp3nvv1b333quEhASNGTNGiYmJio2NrXZ7Z2dny98XLxisrKys074vnsdftmyZevToYbXO0dGxTmMCjVV4eLhSUlLk4uKigIAAOTk56YcfftB9992nCRMmaO7cuWrevLk++eQTjR49WmVlZWrSpImkC6ehruQC30t9zs+ePatHH31Ujz/+eJV+QUFBlr89PDys1l2u3zfffFPr+mAfCDKwS507d67zvWM6dOig/fv3W7X99/Lv+fn5KSAgQN9//72GDh1ap30CfxQeHh5q166dVVt2drYqKyv10ksvycHhwkT/W2+9VavxXFxcVFFRccV13HrrrTp06FCVWq62X8eOHXX+/HllZ2frtttuk3RhlregoOCKa8S1QZCBTZ0+fVoPPfSQRo0apZCQEDVt2lQHDhzQiy++qPvvv79OY06ePFm9e/fWggULFB0drQ8//FDbtm275L8EZ8+erccff1ze3t6KjIxUaWmpDhw4oF9//VVxcXF1PTzgD6Fdu3YqLy/Xq6++qujoaGVlZWnp0qW16tu2bVvt2LFDR44ckY+Pj7y9vWvVb/r06brjjjv02GOPacyYMfLw8NChQ4e0c+dOvfbaa3Xu16FDB0VGRurRRx9VSkqKnJycNGXKFLm7u9eqLlx7XCMDm/L09FSPHj20cOFC9e7dW126dFFCQoLGjh17yf8ZXUqvXr20dOlSLViwQKGhodq+fbuefPJJubm51dhnzJgxWr58uVatWqWuXbvq7rvvVmpqqoKDg+t6aMAfRmhoqBYsWKB58+apS5cuWr16tZKTk2vVd+zYserQoYO6d+8uX19fy40wLyckJESZmZn65ptvdNddd+mWW27RrFmzFBAQcNX9Vq1apYCAAN19990aOHCgxo0bpxYtWtSqLlx7JrPZbLZ1EUBDGzt2rL7++mt9/PHHti4FAFCPOLWERumvf/2r7r33Xnl4eGjbtm1KS0vjBncA0AgxI4NG6eGHH1ZGRobOnDmjG264QZMnT9b48eNtXRYAoJ4RZAAAgGFxsS8AADAsggwAADAsggwAADAsggwAADAsggyAayo1NbVeHsBXX+MAMDaCDACL2NhYmUyman+qPmnSJJlMphof5FlbgwYNsnowX1JSkm6++earGlOSKioq9MILL6hjx45yd3dX8+bN1aNHDy1fvtyyzT333KMpU6Zc8dixsbEaMGDAVdcIoP5xQzwAVgIDA7V27VotXLjQ8nyZkpISrVmzxuqpwnVRXl4ud3f3BnluzezZs/X666/rtddeU/fu3VVUVGR5XhaAxosZGQBWbr31VgUGBmrDhg2Wtg0bNigoKEi33HKLpW379u2688471axZM/n4+Oi+++7Td999Z1n/ww8/yGQy6c0339Tdd98tNzc3rV692uqUUGpqqmbPnq3PP/9cJpNJJpNJqampkqQFCxaoa9eu8vDwUGBgoCZOnKizZ8/WWPeWLVs0ceJEPfTQQwoODlZoaKhGjx6tadOmSbowq5KZmamXX37Zsq8ffvhBFRUVGj16tIKDg+Xu7q4OHTro5ZdftoyblJSktLQ0bd682dIvIyNDGRkZMplMVk9FzsnJsYwrSf/+978VHR2t6667Th4eHrrpppv03nvv1fU/DYBqEGQAVDFq1CitWrXKsrxy5UqNHDnSapvi4mLFxcXpwIEDSk9Pl4ODgx544AFVVlZabffMM8/oiSee0OHDhxUREWG1btCgQZo6dapuuukm5eXlKS8vT4MGDZIkOTg46JVXXtFXX32ltLQ0ffjhh3r66adrrNnf318ffvihfvrpp2rXv/zyywoLC9PYsWMt+woMDFRlZaVat26tdevW6dChQ5o1a5ZmzJiht956S5I0bdo0Pfzww4qMjLT069mzZ63ex0mTJqm0tFQfffSRDh48qHnz5snT07NWfQHUDqeWAFTxyCOPKD4+Xv/+978lSVlZWVq7dq0yMjIs28TExFj1WblypXx9fXXo0CF16dLF0j5lyhQNHDiw2v24u7vL09NTTk5O8vf3t1r3+2tZ2rZtq+eee07jx4+v8ZlZCxYs0IMPPih/f3/ddNNN6tmzp+6//35FRUVJkry9veXi4qImTZpY7cvR0VGzZ8+2LAcHB2v37t1666239PDDD8vT01Pu7u4qLS2tUuPlHDt2TDExMeratask6YYbbrii/gAujxkZAFX4+vqqf//+Sk1N1apVq9S/f39df/31VtscPXpUgwcP1g033CAvLy+1bdtW0oUv79/r3r17nWr44IMP1LdvX7Vq1UpNmzbVsGHDdPr0aZ07d67a7Tt37qwvv/xSe/bs0ahRo3Tq1ClFR0drzJgxl93X4sWL1a1bN/n6+srT01N/+9vfqhxHXTz++ON67rnn1KtXLyUmJuqLL7646jEBWCPIAKjWqFGjlJqaqrS0NI0aNarK+ujoaP3yyy9atmyZ9u7dq71790qSysrKrLbz8PC44n3/8MMPuu+++xQSEqK3335b2dnZWrx4cbXj/56Dg4Nuu+02TZkyRRs2bFBqaqpWrFih3NzcGvusXbtW06ZN0+jRo/X+++8rJydHI0eOvOR+Lu5Lkn7/uLry8nKrbcaMGaPvv/9ew4YN08GDB9W9e3e9+uqrlz1+ALVHkAFQrcjISJWVlam8vLzKtS2nT5/WkSNHNHPmTPXt21edOnWq86+DXFxcVFFRYdWWnZ2tyspKvfTSS7rjjjvUvn17nThx4orH7ty5s6QL1/PUtK+srCz17NlTEydO1C233KJ27dpZXbRcUz9fX19JUl5enqUtJyenSg2BgYEaP368NmzYoKlTp2rZsmVXfBwAasY1MgCq5ejoqMOHD1v+/r3rrrtOPj4++tvf/qaWLVvq2LFjeuaZZ+q0n7Zt2yo3N1c5OTlq3bq1mjZtqnbt2qm8vFyvvvqqoqOjlZWVpaVLl15ynAcffFC9evVSz5495e/vr9zcXMXHx6t9+/bq2LGjZV979+7VDz/8IE9PTzVv3lw33nij3njjDe3YsUPBwcH6+9//rv379ys4ONiqxh07dujIkSPy8fGRt7e32rVrp8DAQCUlJWnu3Ln65ptv9NJLL1nVNGXKFEVFRal9+/b69ddftWvXLnXq1KlO7xOA6jEjA6BGXl5e8vLyqtLu4OCgtWvXKjs7W126dNGTTz6p+fPn12kfMTExioyMVHh4uHx9ffXPf/5ToaGhWrBggebNm6cuXbpo9erVSk5OvuQ4EREReueddxQdHa327dtrxIgR6tixo95//305OV34N9u0adPk6Oiozp07y9fXV8eOHdOjjz6qgQMHatCgQerRo4dOnz6tiRMnWo09duxYdejQQd27d5evr6+ysrLk7Oysf/7zn/r6668VEhKiefPm6bnnnrPqV1FRoUmTJqlTp06KjIxU+/bta7xYGUDdmMy/P8ELAABgIMzIAAAAwyLIAAAAwyLIAAAAwyLIAAAAwyLIAAAAwyLIAAAAwyLIAAAAwyLIAAAAwyLIAAAAwyLIAAAAwyLIAAAAwyLIAAAAw/q/S7k9XDLoi30AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Gender Vs product purchased\n",
        "df.groupby('Gender')['Product'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "xWFJ2sJ3zJoo",
        "outputId": "58fc3ce6-6a7c-4d3e-bf8c-afae5a82839c"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Gender  Product\n",
              "Female  KP281      40\n",
              "        KP481      29\n",
              "        KP781       7\n",
              "Male    KP281      40\n",
              "        KP781      33\n",
              "        KP481      31\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th>Product</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Female</th>\n",
              "      <th>KP281</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Male</th>\n",
              "      <th>KP281</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Gender',hue='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "c0_tNeEizQ-g",
        "outputId": "624bd9f2-f0fd-48a0-eaa5-8f0737a81326"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Gender', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Age Vs product purchased\n",
        "df.groupby('Age_Group')['Product'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "qv-D50LHzTDe",
        "outputId": "9d9624e9-7b1c-4d1d-a6d8-f8e78efe3cb5"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age_Group    Product\n",
              "Adult        KP281      40\n",
              "             KP481      30\n",
              "             KP781      19\n",
              "Old          KP281       6\n",
              "             KP781       4\n",
              "             KP481       2\n",
              "Teenager     KP281       1\n",
              "Young Adult  KP281      33\n",
              "             KP481      28\n",
              "             KP781      17\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_Group</th>\n",
              "      <th>Product</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Adult</th>\n",
              "      <th>KP281</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Old</th>\n",
              "      <th>KP281</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Teenager</th>\n",
              "      <th>KP281</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Young Adult</th>\n",
              "      <th>KP281</th>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Age_Group',hue='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "3IsJoW5vzZwg",
        "outputId": "aab2c254-6f99-4699-e664-23aa836441b0"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Age_Group', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 65
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Find if there is any relationship between the continuous variables and the output variable in the data.\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "SVSXqUZ6zpwm",
        "outputId": "fddfd1bc-127b-4dfd-f762-87108fa92568"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0     KP281   20    Male         14        Single      3        4   34053   \n",
              "1     KP281   20    Male         15        Single      2        3   34053   \n",
              "2     KP281   20  Female         14     Partnered      4        3   34053   \n",
              "3     KP281   20    Male         14        Single      3        3   34053   \n",
              "4     KP281   20    Male         14     Partnered      4        2   35247   \n",
              "..      ...  ...     ...        ...           ...    ...      ...     ...   \n",
              "175   KP781   40    Male         18        Single      5        5   83416   \n",
              "176   KP781   42    Male         18        Single      5        4   89641   \n",
              "177   KP781   43    Male         16        Single      5        5   90886   \n",
              "178   KP781   43    Male         18     Partnered      4        5   90948   \n",
              "179   KP781   43    Male         18     Partnered      4        5   90948   \n",
              "\n",
              "     Miles    Age_Group  \n",
              "0      112     Teenager  \n",
              "1       75  Young Adult  \n",
              "2       66  Young Adult  \n",
              "3       85  Young Adult  \n",
              "4       47  Young Adult  \n",
              "..     ...          ...  \n",
              "175    200        Adult  \n",
              "176    200          Old  \n",
              "177    160          Old  \n",
              "178    120          Old  \n",
              "179    180          Old  \n",
              "\n",
              "[180 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2cd97671-2a42-44f2-84de-79735e0231c1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>34053</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>85</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>KP781</td>\n",
              "      <td>40</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>83416</td>\n",
              "      <td>200</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>KP781</td>\n",
              "      <td>42</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>89641</td>\n",
              "      <td>200</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>16</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>90886</td>\n",
              "      <td>160</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>90948</td>\n",
              "      <td>120</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>90948</td>\n",
              "      <td>180</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cd97671-2a42-44f2-84de-79735e0231c1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2cd97671-2a42-44f2-84de-79735e0231c1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2cd97671-2a42-44f2-84de-79735e0231c1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-029c4a69-db4f-4814-92d7-d4f99b351aba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-029c4a69-db4f-4814-92d7-d4f99b351aba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-029c4a69-db4f-4814-92d7-d4f99b351aba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_aa7b00ac-4cd1-4527-9bee-339c62b0c5e3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_aa7b00ac-4cd1-4527-9bee-339c62b0c5e3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 20,\n        \"max\": 43,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          28,\n          36,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 14,\n        \"max\": 18,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15463,\n        \"min\": 34053,\n        \"max\": 90948,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          68220,\n          90948\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 47,\n        \"max\": 200,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          188,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Young Adult\",\n          \"Old\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Age Vs Product\n",
        "sns.scatterplot(x='Age',y='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "iFyBJOGpeYh4",
        "outputId": "7376ac0b-7bda-496d-a536-db4b3d071b8e"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Age', ylabel='Product'>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Education Vs product\n",
        "sns.scatterplot(x='Education',y='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "8_84Q8lientp",
        "outputId": "f480f01e-9211-41f9-c49c-82529ad5f75e"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Education', ylabel='Product'>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Usage Vs Product\n",
        "sns.scatterplot(x='Usage',y='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "cCl-Tvvhey3C",
        "outputId": "1a27c875-cffc-422a-c84c-b17b9dee8591"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Usage', ylabel='Product'>"
            ]
          },
          "metadata": {},
          "execution_count": 69
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fitness Vs Product\n",
        "sns.scatterplot(x='Fitness',y='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "OAuegPcAe5Xq",
        "outputId": "8393a1a1-b3d3-452b-abe8-65ad2c900dab"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Fitness', ylabel='Product'>"
            ]
          },
          "metadata": {},
          "execution_count": 70
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Income Vs Product\n",
        "\n",
        "sns.scatterplot(x='Income',y='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "XqLHcdVNe9L-",
        "outputId": "ff81d60b-12bd-4788-aaec-bd19deaa7aa3"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Income', ylabel='Product'>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Income Vs Product\n",
        "sns.scatterplot(x='Miles',y='Product',data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "CXieEw-xfA-e",
        "outputId": "9220582c-e6af-4fe0-edcb-e1507a4e7e1f"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Miles', ylabel='Product'>"
            ]
          },
          "metadata": {},
          "execution_count": 72
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4 Representing the Probability\n",
        "#a.â—‹ Find the marginal probability (what percent of customers have purchased KP281, KP481, or KP781)\n",
        "df['Product'].value_counts(normalize=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "TSA7GoTxfaAe",
        "outputId": "3889dc03-a83c-4778-8643-461f1e72b8b0"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product\n",
              "KP281    0.444444\n",
              "KP481    0.333333\n",
              "KP781    0.222222\n",
              "Name: proportion, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>proportion</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>KP281</th>\n",
              "      <td>0.444444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>0.222222</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "round(df['Product'].value_counts()/df['Product'].count(),2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "APIRdQJrgH0w",
        "outputId": "d20e2940-a55a-4fcf-8656-f8ccb1e07f1f"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product\n",
              "KP281    0.44\n",
              "KP481    0.33\n",
              "KP781    0.22\n",
              "Name: count, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>KP281</th>\n",
              "      <td>0.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>0.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>0.22</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1=pd.crosstab(columns=df['Product'],index=df['Gender'],normalize=True,margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "-8NTmMeMgaee",
        "outputId": "32fce43e-77c8-4e8c-b542-126c3230e32d"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product     KP281     KP481     KP781       All\n",
              "Gender                                         \n",
              "Female   0.222222  0.161111  0.038889  0.422222\n",
              "Male     0.222222  0.172222  0.183333  0.577778\n",
              "All      0.444444  0.333333  0.222222  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03907498-ea32-403b-b11a-dcf71b7603fa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Female</th>\n",
              "      <td>0.222222</td>\n",
              "      <td>0.161111</td>\n",
              "      <td>0.038889</td>\n",
              "      <td>0.422222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>0.222222</td>\n",
              "      <td>0.172222</td>\n",
              "      <td>0.183333</td>\n",
              "      <td>0.577778</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.222222</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03907498-ea32-403b-b11a-dcf71b7603fa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-03907498-ea32-403b-b11a-dcf71b7603fa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-03907498-ea32-403b-b11a-dcf71b7603fa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f44246c3-4953-4fa1-82d1-71058ac6d057\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f44246c3-4953-4fa1-82d1-71058ac6d057')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f44246c3-4953-4fa1-82d1-71058ac6d057 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Female\",\n          \"Male\",\n          \"All\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12830005981991682,\n        \"min\": 0.2222222222222222,\n        \"max\": 0.4444444444444444,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.4444444444444444,\n          0.2222222222222222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09638528651609705,\n        \"min\": 0.16111111111111112,\n        \"max\": 0.3333333333333333,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.16111111111111112,\n          0.17222222222222222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0965985285610739,\n        \"min\": 0.03888888888888889,\n        \"max\": 0.2222222222222222,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.03888888888888889,\n          0.18333333333333332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29896942326830467,\n        \"min\": 0.4222222222222222,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.4222222222222222,\n          0.5777777777777777\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5c75XzKzs0Lj",
        "outputId": "640dc9f9-011b-40b3-98b0-c01879869787"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0   KP281   20    Male         14        Single      3        4   34053   \n",
              "1   KP281   20    Male         15        Single      2        3   34053   \n",
              "2   KP281   20  Female         14     Partnered      4        3   34053   \n",
              "3   KP281   20    Male         14        Single      3        3   34053   \n",
              "4   KP281   20    Male         14     Partnered      4        2   35247   \n",
              "\n",
              "   Miles    Age_Group  \n",
              "0    112     Teenager  \n",
              "1     75  Young Adult  \n",
              "2     66  Young Adult  \n",
              "3     85  Young Adult  \n",
              "4     47  Young Adult  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0f2dcc40-01f7-4045-b3ee-9d7f6a600e9d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>34053</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>85</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f2dcc40-01f7-4045-b3ee-9d7f6a600e9d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0f2dcc40-01f7-4045-b3ee-9d7f6a600e9d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0f2dcc40-01f7-4045-b3ee-9d7f6a600e9d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-86a6b6e5-2e4c-47fd-b473-a4b17ba4ce9f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-86a6b6e5-2e4c-47fd-b473-a4b17ba4ce9f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-86a6b6e5-2e4c-47fd-b473-a4b17ba4ce9f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 20,\n        \"max\": 43,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          28,\n          36,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 14,\n        \"max\": 18,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15463,\n        \"min\": 34053,\n        \"max\": 90948,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          68220,\n          90948\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 47,\n        \"max\": 200,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          188,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Young Adult\",\n          \"Old\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(columns=df['Product'],index=df['Age'],margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 864
        },
        "id": "76flfWE9FWUR",
        "outputId": "26a97776-4a39-4ac8-9d40-60c18f45a16e"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product  KP281  KP481  KP781  All\n",
              "Age                              \n",
              "20           6      4      0   10\n",
              "21           4      3      0    7\n",
              "22           4      0      3    7\n",
              "23           8      7      3   18\n",
              "24           5      3      4   12\n",
              "25           7     11      7   25\n",
              "26           7      3      2   12\n",
              "27           3      1      3    7\n",
              "28           6      0      3    9\n",
              "29           3      1      2    6\n",
              "30           2      2      3    7\n",
              "31           2      3      1    6\n",
              "32           2      2      0    4\n",
              "33           2      5      1    8\n",
              "34           2      3      1    6\n",
              "35           3      4      1    8\n",
              "36           1      0      0    1\n",
              "37           1      1      0    2\n",
              "38           4      2      1    7\n",
              "39           1      0      0    1\n",
              "40           1      3      1    5\n",
              "41           1      0      0    1\n",
              "42           0      0      1    1\n",
              "43           5      2      3   10\n",
              "All         80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f9a374f7-0c41-4bde-876a-44cd40a1e219\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>7</td>\n",
              "      <td>11</td>\n",
              "      <td>7</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9a374f7-0c41-4bde-876a-44cd40a1e219')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f9a374f7-0c41-4bde-876a-44cd40a1e219 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f9a374f7-0c41-4bde-876a-44cd40a1e219');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f1d52e43-0ba6-438a-8095-c7f9f2b2a08c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1d52e43-0ba6-438a-8095-c7f9f2b2a08c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f1d52e43-0ba6-438a-8095-c7f9f2b2a08c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          28,\n          36,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 80,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0,\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 0,\n        \"max\": 60,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          5,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 0,\n        \"max\": 40,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34,\n        \"min\": 1,\n        \"max\": 180,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          5,\n          1,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the probability that the customer buys a product based on each column.\n",
        "pd.crosstab(columns=df['Product'],index=df['Age_Group'],margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "NeB3rV7YsEs6",
        "outputId": "0e7417b1-8f14-4304-bf28-a60d9928cc71"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product      KP281  KP481  KP781  All\n",
              "Age_Group                            \n",
              "Adult           40     30     19   89\n",
              "Old              6      2      4   12\n",
              "Teenager         1      0      0    1\n",
              "Young Adult     33     28     17   78\n",
              "All             80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd10b644-ec4d-4076-bf2f-5c2096e06bd4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_Group</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Adult</th>\n",
              "      <td>40</td>\n",
              "      <td>30</td>\n",
              "      <td>19</td>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Old</th>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Teenager</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Young Adult</th>\n",
              "      <td>33</td>\n",
              "      <td>28</td>\n",
              "      <td>17</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd10b644-ec4d-4076-bf2f-5c2096e06bd4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd10b644-ec4d-4076-bf2f-5c2096e06bd4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd10b644-ec4d-4076-bf2f-5c2096e06bd4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-477da2c9-dd6e-4289-9f03-6dd1979debf4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-477da2c9-dd6e-4289-9f03-6dd1979debf4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-477da2c9-dd6e-4289-9f03-6dd1979debf4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Old\",\n          \"All\",\n          \"Teenager\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 1,\n        \"max\": 80,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6,\n          80,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 60,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          60,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 40,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          40,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71,\n        \"min\": 1,\n        \"max\": 180,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          12,\n          180,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1=pd.crosstab(columns=df['Product'],index=df['Gender'],margins=True)\n",
        "df1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "gMIM5uiw9PaL",
        "outputId": "1d93b83d-f57a-44c8-fc43-6b6ddc945bf9"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product  KP281  KP481  KP781  All\n",
              "Gender                           \n",
              "Female      40     29      7   76\n",
              "Male        40     31     33  104\n",
              "All         80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0b333d3-264b-45a5-bea7-53dfd27c061f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Female</th>\n",
              "      <td>40</td>\n",
              "      <td>29</td>\n",
              "      <td>7</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>40</td>\n",
              "      <td>31</td>\n",
              "      <td>33</td>\n",
              "      <td>104</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0b333d3-264b-45a5-bea7-53dfd27c061f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e0b333d3-264b-45a5-bea7-53dfd27c061f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e0b333d3-264b-45a5-bea7-53dfd27c061f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ec6e8772-fa98-482e-afeb-bb1142111695\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec6e8772-fa98-482e-afeb-bb1142111695')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ec6e8772-fa98-482e-afeb-bb1142111695 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6f2ceae2-9abe-479f-9a1e-0ec59382fc07\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6f2ceae2-9abe-479f-9a1e-0ec59382fc07 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Female\",\n          \"Male\",\n          \"All\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 40,\n        \"max\": 80,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          80,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 29,\n        \"max\": 60,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          29,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 7,\n        \"max\": 40,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          7,\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53,\n        \"min\": 76,\n        \"max\": 180,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          76,\n          104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Probability of male customer to buy a product\n",
        "male=df1.loc['Male','All']/df1.loc['All','All']\n",
        "male"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "KRdOSwNn9VDw",
        "outputId": "1045e1b2-e2a0-4124-c1a3-ae7979cbebb9"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5777777777777777"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Probability of female customer to buy a product\n",
        "female=df1.loc['Female','All']/df1.loc['All','All']\n",
        "female"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "wziBtUUF921v",
        "outputId": "b89f5872-5c91-4609-9963-8be036cb2fe1"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4222222222222222"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Find the conditional probability that an event occurs given that another event has\n",
        "#occurred. (Example: given that a customer is female, what is the probability\n",
        "#sheâ€™ll purchase a KP481)\n",
        "#P(KP481/female)=P(KP481âˆ©female)/P(female)\n",
        "ans=df1.loc['Female','KP481']/df1.loc['Female','All']\n",
        "ans"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "BxkjvPOk-Sx5",
        "outputId": "dc102af4-bad0-4624-e993-48d14572fef3"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.3815789473684211"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(columns=df['Product'],index=df['Education'],margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "4vKdgAqTtJpo",
        "outputId": "4c212c7e-429f-46c2-b7d6-628271186a22"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product    KP281  KP481  KP781  All\n",
              "Education                          \n",
              "14            35     26      2   63\n",
              "15             4      1      0    5\n",
              "16            39     31     15   85\n",
              "18             2      2     23   27\n",
              "All           80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4652928-520e-4eae-a176-87b617ba5520\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>35</td>\n",
              "      <td>26</td>\n",
              "      <td>2</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>39</td>\n",
              "      <td>31</td>\n",
              "      <td>15</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>23</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4652928-520e-4eae-a176-87b617ba5520')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4652928-520e-4eae-a176-87b617ba5520 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4652928-520e-4eae-a176-87b617ba5520');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e46fe61c-7faf-4086-b2e7-62d9766af730\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e46fe61c-7faf-4086-b2e7-62d9766af730')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e46fe61c-7faf-4086-b2e7-62d9766af730 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          15,\n          \"All\",\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 2,\n        \"max\": 80,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          80,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 1,\n        \"max\": 60,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          60,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 0,\n        \"max\": 40,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          40,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67,\n        \"min\": 5,\n        \"max\": 180,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5,\n          180,\n          85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(columns=df['Product'],index=df['MaritalStatus'],margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "73z-79eqtSMs",
        "outputId": "db692e7d-651b-4f93-e78d-193f4e59599b"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product        KP281  KP481  KP781  All\n",
              "MaritalStatus                          \n",
              "Partnered         48     36     23  107\n",
              "Single            32     24     17   73\n",
              "All               80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9caa68ba-fd15-4279-b8ba-dc57ef5728d0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Partnered</th>\n",
              "      <td>48</td>\n",
              "      <td>36</td>\n",
              "      <td>23</td>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Single</th>\n",
              "      <td>32</td>\n",
              "      <td>24</td>\n",
              "      <td>17</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9caa68ba-fd15-4279-b8ba-dc57ef5728d0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9caa68ba-fd15-4279-b8ba-dc57ef5728d0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9caa68ba-fd15-4279-b8ba-dc57ef5728d0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-41668bf5-412e-48af-ac6f-f9300491b862\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41668bf5-412e-48af-ac6f-f9300491b862')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-41668bf5-412e-48af-ac6f-f9300491b862 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\",\n          \"All\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 32,\n        \"max\": 80,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          48,\n          32,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18,\n        \"min\": 24,\n        \"max\": 60,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          36,\n          24,\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 17,\n        \"max\": 40,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          23,\n          17,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54,\n        \"min\": 73,\n        \"max\": 180,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          107,\n          73,\n          180\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(columns=df['Product'],index=df['Usage'],margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "IFN-eJCXteOr",
        "outputId": "33934016-866f-46c3-f3a6-cc614802e0f4"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product  KP281  KP481  KP781  All\n",
              "Usage                            \n",
              "2           19     14      0   33\n",
              "3           37     31      1   69\n",
              "4           22     12     18   52\n",
              "5            2      3     21   26\n",
              "All         80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-af78f48e-28c3-4e88-bfec-68d4b532b3cd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>19</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>37</td>\n",
              "      <td>31</td>\n",
              "      <td>1</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>22</td>\n",
              "      <td>12</td>\n",
              "      <td>18</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>21</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af78f48e-28c3-4e88-bfec-68d4b532b3cd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-af78f48e-28c3-4e88-bfec-68d4b532b3cd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-af78f48e-28c3-4e88-bfec-68d4b532b3cd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0d15d587-5270-48f9-9788-6c5fd5ea6005\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0d15d587-5270-48f9-9788-6c5fd5ea6005')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0d15d587-5270-48f9-9788-6c5fd5ea6005 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          \"All\",\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 2,\n        \"max\": 80,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          37,\n          80,\n          22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22,\n        \"min\": 3,\n        \"max\": 60,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          31,\n          60,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 0,\n        \"max\": 40,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          40,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62,\n        \"min\": 26,\n        \"max\": 180,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          69,\n          180,\n          52\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(columns=df['Product'],index=df['Fitness'],margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "mbdrUlevtiPy",
        "outputId": "f1e01528-a37c-4e3d-ceef-b57e3091e769"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product  KP281  KP481  KP781  All\n",
              "Fitness                          \n",
              "2           15     13      0   28\n",
              "3           54     39      4   97\n",
              "4            9      8      7   24\n",
              "5            2      0     29   31\n",
              "All         80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f56f353-5051-4453-bfd9-7fd235bc73fa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54</td>\n",
              "      <td>39</td>\n",
              "      <td>4</td>\n",
              "      <td>97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>29</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f56f353-5051-4453-bfd9-7fd235bc73fa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f56f353-5051-4453-bfd9-7fd235bc73fa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f56f353-5051-4453-bfd9-7fd235bc73fa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1e2bd36c-0153-4320-bb7f-0f0b5c61bde1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1e2bd36c-0153-4320-bb7f-0f0b5c61bde1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1e2bd36c-0153-4320-bb7f-0f0b5c61bde1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          \"All\",\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33,\n        \"min\": 2,\n        \"max\": 80,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          54,\n          80,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 60,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          39,\n          60,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 0,\n        \"max\": 40,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          40,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67,\n        \"min\": 24,\n        \"max\": 180,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          97,\n          180,\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(columns=df['Product'],index=df['Income'],margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1805
        },
        "id": "reL8RYPftnCz",
        "outputId": "7ad3ee4d-34d6-4164-d3b7-5435c0d67cfe"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product  KP281  KP481  KP781  All\n",
              "Income                           \n",
              "34053        6      3      0    9\n",
              "34110        2      3      0    5\n",
              "35247        5      0      0    5\n",
              "36384        3      1      0    4\n",
              "37521        2      0      0    2\n",
              "38658        3      2      0    5\n",
              "39795        2      0      0    2\n",
              "40932        4      2      0    6\n",
              "42069        2      0      0    2\n",
              "43206        1      4      0    5\n",
              "44343        4      0      0    4\n",
              "45480        5      9      0   14\n",
              "46617        7      1      0    8\n",
              "47754        0      2      0    2\n",
              "48556        0      0      2    2\n",
              "48658        0      0      1    1\n",
              "48891        2      3      0    5\n",
              "49801        0      0      2    2\n",
              "50028        2      5      0    7\n",
              "51165        3      4      0    7\n",
              "52290        0      0      1    1\n",
              "52291        0      0      1    1\n",
              "52302        6      3      0    9\n",
              "53439        3      5      0    8\n",
              "53536        0      0      1    1\n",
              "54576        7      1      0    8\n",
              "54781        0      0      1    1\n",
              "55713        1      0      0    1\n",
              "56850        2      0      0    2\n",
              "57271        0      0      1    1\n",
              "57987        1      3      0    4\n",
              "58516        0      0      1    1\n",
              "59124        1      2      0    3\n",
              "60261        2      1      0    3\n",
              "61006        0      0      2    2\n",
              "61398        1      1      0    2\n",
              "62251        0      0      1    1\n",
              "62535        0      1      0    1\n",
              "64741        0      0      2    2\n",
              "64809        1      2      0    3\n",
              "65220        0      1      0    1\n",
              "67083        1      1      0    2\n",
              "68220        1      0      0    1\n",
              "69721        0      0      1    1\n",
              "70966        0      0      1    1\n",
              "74701        0      0      1    1\n",
              "75946        0      0      1    1\n",
              "77191        0      0      1    1\n",
              "83416        0      0      2    2\n",
              "85906        0      0      1    1\n",
              "88396        0      0      2    2\n",
              "89641        0      0      2    2\n",
              "90886        0      0      3    3\n",
              "90948        0      0      9    9\n",
              "All         80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cd6621b0-9022-463d-ade8-0568a2e7b669\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>34053</th>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34110</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35247</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36384</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37521</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38658</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39795</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40932</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42069</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43206</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44343</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45480</th>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46617</th>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47754</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48556</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48658</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48891</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49801</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50028</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51165</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52290</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52291</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52302</th>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53439</th>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53536</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54576</th>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54781</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55713</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56850</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57271</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57987</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58516</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59124</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60261</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61006</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61398</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62251</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62535</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64741</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64809</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65220</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67083</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68220</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69721</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70966</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74701</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75946</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77191</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>83416</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85906</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88396</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89641</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90886</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90948</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd6621b0-9022-463d-ade8-0568a2e7b669')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cd6621b0-9022-463d-ade8-0568a2e7b669 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cd6621b0-9022-463d-ade8-0568a2e7b669');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fe36bf4b-bca8-4fc6-bf8f-8940fcaf4522\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe36bf4b-bca8-4fc6-bf8f-8940fcaf4522')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fe36bf4b-bca8-4fc6-bf8f-8940fcaf4522 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 55,\n  \"fields\": [\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 55,\n        \"samples\": [\n          58516,\n          38658,\n          59124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 0,\n        \"max\": 80,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 0,\n        \"max\": 60,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0,\n          9,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 0,\n        \"max\": 40,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          2,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 1,\n        \"max\": 180,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          14,\n          9,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(columns=df['Product'],index=df['Miles'],margins=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 990
        },
        "id": "ao5uHrj_twVO",
        "outputId": "3a604c1f-9f91-484f-8917-d6ea2dd14fac"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product  KP281  KP481  KP781  All\n",
              "Miles                            \n",
              "47          12      5      0   17\n",
              "53           0      7      0    7\n",
              "56           6      0      0    6\n",
              "64           0      6      0    6\n",
              "66          10      0      0   10\n",
              "74           0      3      0    3\n",
              "75          10      0      0   10\n",
              "80           0      0      1    1\n",
              "85          16     11      0   27\n",
              "94           8      0      0    8\n",
              "95           0     12      0   12\n",
              "100          0      0      7    7\n",
              "103          3      0      0    3\n",
              "106          0      8      1    9\n",
              "112          1      0      0    1\n",
              "113          8      0      0    8\n",
              "120          0      0      3    3\n",
              "127          0      5      0    5\n",
              "132          2      0      0    2\n",
              "140          0      0      1    1\n",
              "141          2      0      0    2\n",
              "150          0      0      4    4\n",
              "160          0      0      5    5\n",
              "169          1      0      0    1\n",
              "170          0      2      1    3\n",
              "180          0      0      6    6\n",
              "188          1      0      0    1\n",
              "200          0      1     11   12\n",
              "All         80     60     40  180"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-19acc05e-3b9e-41c3-802a-ba75a33a9f89\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Product</th>\n",
              "      <th>KP281</th>\n",
              "      <th>KP481</th>\n",
              "      <th>KP781</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>16</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>132</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>150</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>160</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>169</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>80</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19acc05e-3b9e-41c3-802a-ba75a33a9f89')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-19acc05e-3b9e-41c3-802a-ba75a33a9f89 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-19acc05e-3b9e-41c3-802a-ba75a33a9f89');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6c9c1245-9b91-412e-a944-f1690ec8a7a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c9c1245-9b91-412e-a944-f1690ec8a7a9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6c9c1245-9b91-412e-a944-f1690ec8a7a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 29,\n  \"fields\": [\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          200,\n          120,\n          103\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP281\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 80,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2,\n          0,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP481\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 0,\n        \"max\": 60,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          11,\n          5,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KP781\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 0,\n        \"max\": 40,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          11,\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 1,\n        \"max\": 180,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          9,\n          2,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "PnVt4uG6-5g_",
        "outputId": "ac32b7ab-6b73-401c-bd1d-52dc7d1c6e3a"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0   KP281   20    Male         14        Single      3        4   34053   \n",
              "1   KP281   20    Male         15        Single      2        3   34053   \n",
              "2   KP281   20  Female         14     Partnered      4        3   34053   \n",
              "3   KP281   20    Male         14        Single      3        3   34053   \n",
              "4   KP281   20    Male         14     Partnered      4        2   35247   \n",
              "\n",
              "   Miles    Age_Group  \n",
              "0    112     Teenager  \n",
              "1     75  Young Adult  \n",
              "2     66  Young Adult  \n",
              "3     85  Young Adult  \n",
              "4     47  Young Adult  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed9c75d5-d97a-41ba-80c5-ce663795bd58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>34053</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>85</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed9c75d5-d97a-41ba-80c5-ce663795bd58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ed9c75d5-d97a-41ba-80c5-ce663795bd58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ed9c75d5-d97a-41ba-80c5-ce663795bd58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3cd2cb96-66dd-46a9-a6a7-6c5a39168428\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3cd2cb96-66dd-46a9-a6a7-6c5a39168428')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3cd2cb96-66dd-46a9-a6a7-6c5a39168428 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 20,\n        \"max\": 43,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          28,\n          36,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 14,\n        \"max\": 18,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15463,\n        \"min\": 34053,\n        \"max\": 90948,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          68220,\n          90948\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 47,\n        \"max\": 200,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          188,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Young Adult\",\n          \"Old\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Check the correlation among different factors\n",
        "# Find the correlation between the given features in the table."
      ],
      "metadata": {
        "id": "1q9hpGnjsW3M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_corr1=df.corr(numeric_only = True,method='pearson')\n",
        "df_corr1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "o5nSAbJt-7hr",
        "outputId": "075875d7-e7e5-4d82-c2c5-96abee966664"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Age  Education     Usage   Fitness    Income     Miles\n",
              "Age        1.000000   0.301984  0.015218  0.057314  0.514407  0.029719\n",
              "Education  0.301984   1.000000  0.412484  0.441082  0.628597  0.377294\n",
              "Usage      0.015218   0.412484  1.000000  0.660556  0.478615  0.769234\n",
              "Fitness    0.057314   0.441082  0.660556  1.000000  0.546997  0.826307\n",
              "Income     0.514407   0.628597  0.478615  0.546997  1.000000  0.537296\n",
              "Miles      0.029719   0.377294  0.769234  0.826307  0.537296  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dfc83bab-9321-4a09-9d0b-153a8f819c59\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Education</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.301984</td>\n",
              "      <td>0.015218</td>\n",
              "      <td>0.057314</td>\n",
              "      <td>0.514407</td>\n",
              "      <td>0.029719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>0.301984</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.412484</td>\n",
              "      <td>0.441082</td>\n",
              "      <td>0.628597</td>\n",
              "      <td>0.377294</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <td>0.015218</td>\n",
              "      <td>0.412484</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.660556</td>\n",
              "      <td>0.478615</td>\n",
              "      <td>0.769234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <td>0.057314</td>\n",
              "      <td>0.441082</td>\n",
              "      <td>0.660556</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.546997</td>\n",
              "      <td>0.826307</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>0.514407</td>\n",
              "      <td>0.628597</td>\n",
              "      <td>0.478615</td>\n",
              "      <td>0.546997</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.537296</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <td>0.029719</td>\n",
              "      <td>0.377294</td>\n",
              "      <td>0.769234</td>\n",
              "      <td>0.826307</td>\n",
              "      <td>0.537296</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfc83bab-9321-4a09-9d0b-153a8f819c59')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dfc83bab-9321-4a09-9d0b-153a8f819c59 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dfc83bab-9321-4a09-9d0b-153a8f819c59');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c8979930-106a-4ed9-9edb-e0b42148519d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8979930-106a-4ed9-9edb-e0b42148519d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c8979930-106a-4ed9-9edb-e0b42148519d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2a8916b3-914f-4569-a180-cfc9d24b4682\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_corr1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2a8916b3-914f-4569-a180-cfc9d24b4682 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_corr1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_corr1",
              "summary": "{\n  \"name\": \"df_corr1\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.38643961425055506,\n        \"min\": 0.015217917074410187,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          0.30198390007641435,\n          0.02971881415633943\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25596520815184803,\n        \"min\": 0.30198390007641435,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.30198390007641435,\n          1.0,\n          0.37729354322151676\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33839831332773107,\n        \"min\": 0.015217917074410187,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.015217917074410187,\n          0.4124843244220858,\n          0.7692341178159979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32762463360560046,\n        \"min\": 0.057313773027815804,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.057313773027815804,\n          0.4410823642543814,\n          0.8263072257008749\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19377799400563042,\n        \"min\": 0.47861512965966657,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.5144074743973355,\n          0.6285974526315236,\n          0.5372964652040144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3515686779881423,\n        \"min\": 0.02971881415633943,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.02971881415633943,\n          0.37729354322151676,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(df_corr1, cmap=\"coolwarm\", annot=True, linewidths=0.5, linecolor='black', square=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "3MpZPVjWEIKF",
        "outputId": "22939db6-fb00-4dcf-f7db-2cef401e3ba3"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 137
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_corr2=df.corr(numeric_only = True,method='kendall')\n",
        "df_corr2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "ApsZSnvoApN3",
        "outputId": "852fbf8c-8278-4c1b-ef59-d256cbea723c"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Age  Education     Usage   Fitness    Income     Miles\n",
              "Age        1.000000   0.262091  0.024662  0.049586  0.528982  0.019039\n",
              "Education  0.262091   1.000000  0.346278  0.344735  0.496956  0.246228\n",
              "Usage      0.024662   0.346278  1.000000  0.571002  0.283983  0.640321\n",
              "Fitness    0.049586   0.344735  0.571002  1.000000  0.310409  0.703804\n",
              "Income     0.528982   0.496956  0.283983  0.310409  1.000000  0.252674\n",
              "Miles      0.019039   0.246228  0.640321  0.703804  0.252674  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0558343a-5914-4363-802f-698fdb049c4a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Education</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.262091</td>\n",
              "      <td>0.024662</td>\n",
              "      <td>0.049586</td>\n",
              "      <td>0.528982</td>\n",
              "      <td>0.019039</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>0.262091</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.346278</td>\n",
              "      <td>0.344735</td>\n",
              "      <td>0.496956</td>\n",
              "      <td>0.246228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <td>0.024662</td>\n",
              "      <td>0.346278</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.571002</td>\n",
              "      <td>0.283983</td>\n",
              "      <td>0.640321</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <td>0.049586</td>\n",
              "      <td>0.344735</td>\n",
              "      <td>0.571002</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.310409</td>\n",
              "      <td>0.703804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>0.528982</td>\n",
              "      <td>0.496956</td>\n",
              "      <td>0.283983</td>\n",
              "      <td>0.310409</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.252674</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <td>0.019039</td>\n",
              "      <td>0.246228</td>\n",
              "      <td>0.640321</td>\n",
              "      <td>0.703804</td>\n",
              "      <td>0.252674</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0558343a-5914-4363-802f-698fdb049c4a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0558343a-5914-4363-802f-698fdb049c4a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0558343a-5914-4363-802f-698fdb049c4a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9bb0096f-d7bf-4a86-b9c4-0311e505caf4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bb0096f-d7bf-4a86-b9c4-0311e505caf4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9bb0096f-d7bf-4a86-b9c4-0311e505caf4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e29e3a8a-6f25-46fd-b942-4182510c8f50\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_corr2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e29e3a8a-6f25-46fd-b942-4182510c8f50 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_corr2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_corr2",
              "summary": "{\n  \"name\": \"df_corr2\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3899079285334955,\n        \"min\": 0.019039462787040082,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          0.2620907131060156,\n          0.019039462787040082\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2840331986804621,\n        \"min\": 0.24622830049716551,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.2620907131060156,\n          1.0,\n          0.24622830049716551\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3370429277243357,\n        \"min\": 0.0246615900763382,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.0246615900763382,\n          0.34627825809425994,\n          0.6403205984999049\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3344944040769095,\n        \"min\": 0.04958584297260277,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.04958584297260277,\n          0.344735158885665,\n          0.7038041891293431\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27997842147574115,\n        \"min\": 0.25267351026816803,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.5289816985487927,\n          0.49695629056537954,\n          0.25267351026816803\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36467754586890994,\n        \"min\": 0.019039462787040082,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.019039462787040082,\n          0.24622830049716551,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(df_corr2, cmap=\"coolwarm\", annot=True, linewidths=0.5, linecolor='black', square=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "EWDprYWpESSo",
        "outputId": "79f201b1-109c-4840-deca-bf7e7a9aa39e"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 138
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_corr3=df.corr(numeric_only = True,method='spearman')\n",
        "df_corr3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "DgXNYCE5A2qT",
        "outputId": "9958748b-77a6-4fc6-aafb-2bd3df4a4213"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Age  Education     Usage   Fitness    Income     Miles\n",
              "Age        1.000000   0.332120  0.028679  0.063592  0.682001  0.025803\n",
              "Education  0.332120   1.000000  0.392487  0.391320  0.609517  0.303990\n",
              "Usage      0.028679   0.392487  1.000000  0.641548  0.366240  0.754488\n",
              "Fitness    0.063592   0.391320  0.641548  1.000000  0.398947  0.815869\n",
              "Income     0.682001   0.609517  0.366240  0.398947  1.000000  0.358082\n",
              "Miles      0.025803   0.303990  0.754488  0.815869  0.358082  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-892e33fd-5cda-47cc-8f95-530fbe336235\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Education</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.332120</td>\n",
              "      <td>0.028679</td>\n",
              "      <td>0.063592</td>\n",
              "      <td>0.682001</td>\n",
              "      <td>0.025803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>0.332120</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.392487</td>\n",
              "      <td>0.391320</td>\n",
              "      <td>0.609517</td>\n",
              "      <td>0.303990</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Usage</th>\n",
              "      <td>0.028679</td>\n",
              "      <td>0.392487</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.641548</td>\n",
              "      <td>0.366240</td>\n",
              "      <td>0.754488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fitness</th>\n",
              "      <td>0.063592</td>\n",
              "      <td>0.391320</td>\n",
              "      <td>0.641548</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.398947</td>\n",
              "      <td>0.815869</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>0.682001</td>\n",
              "      <td>0.609517</td>\n",
              "      <td>0.366240</td>\n",
              "      <td>0.398947</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.358082</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles</th>\n",
              "      <td>0.025803</td>\n",
              "      <td>0.303990</td>\n",
              "      <td>0.754488</td>\n",
              "      <td>0.815869</td>\n",
              "      <td>0.358082</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-892e33fd-5cda-47cc-8f95-530fbe336235')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-892e33fd-5cda-47cc-8f95-530fbe336235 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-892e33fd-5cda-47cc-8f95-530fbe336235');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-88f30a88-617e-4282-b902-eb18301009a3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-88f30a88-617e-4282-b902-eb18301009a3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-88f30a88-617e-4282-b902-eb18301009a3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_99708e32-b085-4766-804f-b985f5aa1ae9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_corr3')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_99708e32-b085-4766-804f-b985f5aa1ae9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_corr3');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_corr3",
              "summary": "{\n  \"name\": \"df_corr3\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4057714366478421,\n        \"min\": 0.02580335848967103,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          0.3321199974909458,\n          0.02580335848967103\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2652635515742178,\n        \"min\": 0.3039895156454442,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.3321199974909458,\n          1.0,\n          0.3039895156454442\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3408183976241936,\n        \"min\": 0.02867864954263381,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.02867864954263381,\n          0.39248726082414087,\n          0.7544876248919964\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3364922001251804,\n        \"min\": 0.06359207655545683,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.06359207655545683,\n          0.3913196748384414,\n          0.8158686296683995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2508737668722299,\n        \"min\": 0.3580815607404636,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6820014870146642,\n          0.6095168388457628,\n          0.3580815607404636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3706336472769603,\n        \"min\": 0.02580335848967103,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.02580335848967103,\n          0.3039895156454442,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(df_corr3, cmap=\"coolwarm\", annot=True, linewidths=0.5, linecolor='black', square=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "yvAIQRf1EVgb",
        "outputId": "6789af71-7ddf-4290-8753-58ea3ebdf8f8"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 139
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Miles and Fitness are highly correlated\n",
        "# Usage and Miles are good correlation\n"
      ],
      "metadata": {
        "id": "ZWJWanwKCMpL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap((pd.crosstab(columns=df['Product'],index=df['Gender'])),cmap=\"YlGnBu\",annot=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "jCNd40BwCux5",
        "outputId": "14f1b45b-2725-46da-bb9a-866a4a9393da"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Product', ylabel='Gender'>"
            ]
          },
          "metadata": {},
          "execution_count": 144
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Male buying more products compared to female."
      ],
      "metadata": {
        "id": "Rak_WjiGH4QD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap((pd.crosstab(columns=df['Product'],index=df['Age_Group'])), cmap=\"YlGnBu\", annot=True, linewidths=0.5, linecolor='black', square=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "HKGjPvxKFtZg",
        "outputId": "24c2841e-a03e-49da-8991-12a4288cc711"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Product', ylabel='Age_Group'>"
            ]
          },
          "metadata": {},
          "execution_count": 141
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''def age_group(age):\n",
        "  if age <= 18:\n",
        "    return 'Teenager'\n",
        "  elif age > 18 and age <= 25:\n",
        "    return 'Young Adult'\n",
        "  elif age > 25 and age <= 40:\n",
        "    return 'Adult'\n",
        "  else:\n",
        "    return 'Old''''\n",
        "\n",
        "# Customers who are in age group 18 to 40 concentrated more in their health condition.\n",
        ""
      ],
      "metadata": {
        "id": "AAOLh7D7HAvI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "_-xJ04JgIjip",
        "outputId": "9dea8198-b530-4848-89aa-bd1cea73769a"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0     KP281   20    Male         14        Single      3        4   34053   \n",
              "1     KP281   20    Male         15        Single      2        3   34053   \n",
              "2     KP281   20  Female         14     Partnered      4        3   34053   \n",
              "3     KP281   20    Male         14        Single      3        3   34053   \n",
              "4     KP281   20    Male         14     Partnered      4        2   35247   \n",
              "..      ...  ...     ...        ...           ...    ...      ...     ...   \n",
              "175   KP781   40    Male         18        Single      5        5   83416   \n",
              "176   KP781   42    Male         18        Single      5        4   89641   \n",
              "177   KP781   43    Male         16        Single      5        5   90886   \n",
              "178   KP781   43    Male         18     Partnered      4        5   90948   \n",
              "179   KP781   43    Male         18     Partnered      4        5   90948   \n",
              "\n",
              "     Miles    Age_Group  \n",
              "0      112     Teenager  \n",
              "1       75  Young Adult  \n",
              "2       66  Young Adult  \n",
              "3       85  Young Adult  \n",
              "4       47  Young Adult  \n",
              "..     ...          ...  \n",
              "175    200        Adult  \n",
              "176    200          Old  \n",
              "177    160          Old  \n",
              "178    120          Old  \n",
              "179    180          Old  \n",
              "\n",
              "[180 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-27de15b2-4ad1-47f2-bcc6-bf1a8cd22030\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>34053</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>85</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "      <td>Young Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>KP781</td>\n",
              "      <td>40</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>83416</td>\n",
              "      <td>200</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>KP781</td>\n",
              "      <td>42</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>89641</td>\n",
              "      <td>200</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>16</td>\n",
              "      <td>Single</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>90886</td>\n",
              "      <td>160</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>90948</td>\n",
              "      <td>120</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>KP781</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>90948</td>\n",
              "      <td>180</td>\n",
              "      <td>Old</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows Ã— 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27de15b2-4ad1-47f2-bcc6-bf1a8cd22030')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-27de15b2-4ad1-47f2-bcc6-bf1a8cd22030 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-27de15b2-4ad1-47f2-bcc6-bf1a8cd22030');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fa480d06-174f-47e7-aa0c-4665710810a8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa480d06-174f-47e7-aa0c-4665710810a8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fa480d06-174f-47e7-aa0c-4665710810a8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_08bd2afe-6ef1-45e4-91a3-96c5f422588b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_08bd2afe-6ef1-45e4-91a3-96c5f422588b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 20,\n        \"max\": 43,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          28,\n          36,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 14,\n        \"max\": 18,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15463,\n        \"min\": 34053,\n        \"max\": 90948,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          68220,\n          90948\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 47,\n        \"max\": 200,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          188,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Young Adult\",\n          \"Old\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "min(df['Income']),max(df['Income'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "5sW9b-qyKCak",
        "outputId": "8f0f080b-5a5c-4320-f2e5-49fcba58506c"
      },
      "execution_count": 163,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(34053, 90948)"
            ]
          },
          "metadata": {},
          "execution_count": 163
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def income_group(income_data):\n",
        "  if income_data <= 25000:\n",
        "    return 'Low Income'\n",
        "  elif income_data > 25000 and income_data <= 50000:\n",
        "    return 'Medium Income'\n",
        "  else:\n",
        "    return 'High Income'\n",
        "\n",
        "df['Income_Group'] = df['Income'].apply(income_group)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "XtnEy_IeIl7M",
        "outputId": "0a17607d-55cb-4326-9a84-530d47e82074"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Product  Age  Gender  Education MaritalStatus  Usage  Fitness  Income  \\\n",
              "0   KP281   20    Male         14        Single      3        4   34053   \n",
              "1   KP281   20    Male         15        Single      2        3   34053   \n",
              "2   KP281   20  Female         14     Partnered      4        3   34053   \n",
              "3   KP281   20    Male         14        Single      3        3   34053   \n",
              "4   KP281   20    Male         14     Partnered      4        2   35247   \n",
              "\n",
              "   Miles    Age_Group   Income_Group  \n",
              "0    112     Teenager  Medium Income  \n",
              "1     75  Young Adult  Medium Income  \n",
              "2     66  Young Adult  Medium Income  \n",
              "3     85  Young Adult  Medium Income  \n",
              "4     47  Young Adult  Medium Income  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-13e1645c-d453-4c0d-8fe9-07881938c1d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "      <th>Income_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>34053</td>\n",
              "      <td>112</td>\n",
              "      <td>Teenager</td>\n",
              "      <td>Medium Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>15</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>75</td>\n",
              "      <td>Young Adult</td>\n",
              "      <td>Medium Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Female</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>66</td>\n",
              "      <td>Young Adult</td>\n",
              "      <td>Medium Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>34053</td>\n",
              "      <td>85</td>\n",
              "      <td>Young Adult</td>\n",
              "      <td>Medium Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KP281</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>14</td>\n",
              "      <td>Partnered</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>35247</td>\n",
              "      <td>47</td>\n",
              "      <td>Young Adult</td>\n",
              "      <td>Medium Income</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-13e1645c-d453-4c0d-8fe9-07881938c1d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-13e1645c-d453-4c0d-8fe9-07881938c1d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-13e1645c-d453-4c0d-8fe9-07881938c1d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0243f316-51b6-4dab-91f5-392f91add91f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0243f316-51b6-4dab-91f5-392f91add91f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0243f316-51b6-4dab-91f5-392f91add91f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 180,\n  \"fields\": [\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"KP281\",\n          \"KP481\",\n          \"KP781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 20,\n        \"max\": 43,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          28,\n          36,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 14,\n        \"max\": 18,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Partnered\",\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fitness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15463,\n        \"min\": 34053,\n        \"max\": 90948,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          68220,\n          90948\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Miles\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 47,\n        \"max\": 200,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          188,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Young Adult\",\n          \"Old\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"High Income\",\n          \"Medium Income\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby('Income_Group')['Product'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "dbfDSg9KI4iL",
        "outputId": "963a4e86-7e68-4125-a9b7-3dfebcf75775"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Income_Group   Product\n",
              "High Income    KP781      35\n",
              "               KP281      32\n",
              "               KP481      30\n",
              "Medium Income  KP281      48\n",
              "               KP481      30\n",
              "               KP781       5\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income_Group</th>\n",
              "      <th>Product</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">High Income</th>\n",
              "      <th>KP781</th>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP281</th>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Medium Income</th>\n",
              "      <th>KP281</th>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP481</th>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP781</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[df['Income']<25000]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "x7BtqK3eI9i8",
        "outputId": "72d2b270-e648-41bc-ce39-a7bb480f86d7"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Product, Age, Gender, Education, MaritalStatus, Usage, Fitness, Income, Miles, Age_Group, Income_Group]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0e51fac4-67e6-4805-9a11-895c839171cd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>Usage</th>\n",
              "      <th>Fitness</th>\n",
              "      <th>Income</th>\n",
              "      <th>Miles</th>\n",
              "      <th>Age_Group</th>\n",
              "      <th>Income_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e51fac4-67e6-4805-9a11-895c839171cd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0e51fac4-67e6-4805-9a11-895c839171cd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0e51fac4-67e6-4805-9a11-895c839171cd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap((pd.crosstab(columns=df['Product'],index=df['Income_Group'])), cmap=\"YlGnBu\", annot=True, linewidths=0.5, linecolor='black', square=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 433
        },
        "id": "gzEzIMqIIzoE",
        "outputId": "d91fcb39-1b29-42cb-d01f-d80dbf0592cb"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Product', ylabel='Income_Group'>"
            ]
          },
          "metadata": {},
          "execution_count": 150
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Medium income people intrested to buy KP281 and KP481.\n",
        "#KP781 are buying by high income people only"
      ],
      "metadata": {
        "id": "tip_-Qq8Jdz2"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}